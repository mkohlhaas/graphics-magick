// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class magick_wand {

    magick_wand() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup("/usr/lib/libGraphicsMagickWand.so", LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int UndefinedColorspace = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.UndefinedColorspace = 0
     * }
     */
    public static int UndefinedColorspace() {
        return UndefinedColorspace;
    }
    private static final int RGBColorspace = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RGBColorspace = 1
     * }
     */
    public static int RGBColorspace() {
        return RGBColorspace;
    }
    private static final int GRAYColorspace = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GRAYColorspace = 2
     * }
     */
    public static int GRAYColorspace() {
        return GRAYColorspace;
    }
    private static final int TransparentColorspace = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TransparentColorspace = 3
     * }
     */
    public static int TransparentColorspace() {
        return TransparentColorspace;
    }
    private static final int OHTAColorspace = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.OHTAColorspace = 4
     * }
     */
    public static int OHTAColorspace() {
        return OHTAColorspace;
    }
    private static final int XYZColorspace = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XYZColorspace = 5
     * }
     */
    public static int XYZColorspace() {
        return XYZColorspace;
    }
    private static final int YCCColorspace = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.YCCColorspace = 6
     * }
     */
    public static int YCCColorspace() {
        return YCCColorspace;
    }
    private static final int YIQColorspace = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.YIQColorspace = 7
     * }
     */
    public static int YIQColorspace() {
        return YIQColorspace;
    }
    private static final int YPbPrColorspace = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.YPbPrColorspace = 8
     * }
     */
    public static int YPbPrColorspace() {
        return YPbPrColorspace;
    }
    private static final int YUVColorspace = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.YUVColorspace = 9
     * }
     */
    public static int YUVColorspace() {
        return YUVColorspace;
    }
    private static final int CMYKColorspace = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CMYKColorspace = 10
     * }
     */
    public static int CMYKColorspace() {
        return CMYKColorspace;
    }
    private static final int sRGBColorspace = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sRGBColorspace = 11
     * }
     */
    public static int sRGBColorspace() {
        return sRGBColorspace;
    }
    private static final int HSLColorspace = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HSLColorspace = 12
     * }
     */
    public static int HSLColorspace() {
        return HSLColorspace;
    }
    private static final int HWBColorspace = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HWBColorspace = 13
     * }
     */
    public static int HWBColorspace() {
        return HWBColorspace;
    }
    private static final int LABColorspace = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.LABColorspace = 14
     * }
     */
    public static int LABColorspace() {
        return LABColorspace;
    }
    private static final int CineonLogRGBColorspace = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CineonLogRGBColorspace = 15
     * }
     */
    public static int CineonLogRGBColorspace() {
        return CineonLogRGBColorspace;
    }
    private static final int Rec601LumaColorspace = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.Rec601LumaColorspace = 16
     * }
     */
    public static int Rec601LumaColorspace() {
        return Rec601LumaColorspace;
    }
    private static final int Rec601YCbCrColorspace = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.Rec601YCbCrColorspace = 17
     * }
     */
    public static int Rec601YCbCrColorspace() {
        return Rec601YCbCrColorspace;
    }
    private static final int Rec709LumaColorspace = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.Rec709LumaColorspace = 18
     * }
     */
    public static int Rec709LumaColorspace() {
        return Rec709LumaColorspace;
    }
    private static final int Rec709YCbCrColorspace = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.Rec709YCbCrColorspace = 19
     * }
     */
    public static int Rec709YCbCrColorspace() {
        return Rec709YCbCrColorspace;
    }

    private static class RGBTransformImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("RGBTransformImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int RGBTransformImage(ImagePtr, const ColorspaceType)
     * }
     */
    public static FunctionDescriptor RGBTransformImage$descriptor() {
        return RGBTransformImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int RGBTransformImage(ImagePtr, const ColorspaceType)
     * }
     */
    public static MethodHandle RGBTransformImage$handle() {
        return RGBTransformImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int RGBTransformImage(ImagePtr, const ColorspaceType)
     * }
     */
    public static MemorySegment RGBTransformImage$address() {
        return RGBTransformImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int RGBTransformImage(ImagePtr, const ColorspaceType)
     * }
     */
    public static int RGBTransformImage(MemorySegment x0, int x1) {
        var mh$ = RGBTransformImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RGBTransformImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TransformColorspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("TransformColorspace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int TransformColorspace(ImagePtr, const ColorspaceType)
     * }
     */
    public static FunctionDescriptor TransformColorspace$descriptor() {
        return TransformColorspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int TransformColorspace(ImagePtr, const ColorspaceType)
     * }
     */
    public static MethodHandle TransformColorspace$handle() {
        return TransformColorspace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int TransformColorspace(ImagePtr, const ColorspaceType)
     * }
     */
    public static MemorySegment TransformColorspace$address() {
        return TransformColorspace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int TransformColorspace(ImagePtr, const ColorspaceType)
     * }
     */
    public static int TransformColorspace(MemorySegment x0, int x1) {
        var mh$ = TransformColorspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TransformColorspace", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TransformRGBImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("TransformRGBImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int TransformRGBImage(ImagePtr, const ColorspaceType)
     * }
     */
    public static FunctionDescriptor TransformRGBImage$descriptor() {
        return TransformRGBImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int TransformRGBImage(ImagePtr, const ColorspaceType)
     * }
     */
    public static MethodHandle TransformRGBImage$handle() {
        return TransformRGBImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int TransformRGBImage(ImagePtr, const ColorspaceType)
     * }
     */
    public static MemorySegment TransformRGBImage$address() {
        return TransformRGBImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int TransformRGBImage(ImagePtr, const ColorspaceType)
     * }
     */
    public static int TransformRGBImage(MemorySegment x0, int x1) {
        var mh$ = TransformRGBImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TransformRGBImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DestroyMagick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("DestroyMagick");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void DestroyMagick()
     * }
     */
    public static FunctionDescriptor DestroyMagick$descriptor() {
        return DestroyMagick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void DestroyMagick()
     * }
     */
    public static MethodHandle DestroyMagick$handle() {
        return DestroyMagick.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void DestroyMagick()
     * }
     */
    public static MemorySegment DestroyMagick$address() {
        return DestroyMagick.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void DestroyMagick()
     * }
     */
    public static void DestroyMagick() {
        var mh$ = DestroyMagick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DestroyMagick");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class InitializeMagick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("InitializeMagick");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void InitializeMagick(const char *path)
     * }
     */
    public static FunctionDescriptor InitializeMagick$descriptor() {
        return InitializeMagick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void InitializeMagick(const char *path)
     * }
     */
    public static MethodHandle InitializeMagick$handle() {
        return InitializeMagick.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void InitializeMagick(const char *path)
     * }
     */
    public static MemorySegment InitializeMagick$address() {
        return InitializeMagick.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void InitializeMagick(const char *path)
     * }
     */
    public static void InitializeMagick(MemorySegment path) {
        var mh$ = InitializeMagick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("InitializeMagick", path);
            }
            mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetColorAsString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetColorAsString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *PixelGetColorAsString(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetColorAsString$descriptor() {
        return PixelGetColorAsString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *PixelGetColorAsString(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetColorAsString$handle() {
        return PixelGetColorAsString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *PixelGetColorAsString(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetColorAsString$address() {
        return PixelGetColorAsString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *PixelGetColorAsString(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetColorAsString(MemorySegment x0) {
        var mh$ = PixelGetColorAsString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetColorAsString", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetBlack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetBlack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double PixelGetBlack(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetBlack$descriptor() {
        return PixelGetBlack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double PixelGetBlack(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetBlack$handle() {
        return PixelGetBlack.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double PixelGetBlack(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetBlack$address() {
        return PixelGetBlack.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double PixelGetBlack(const PixelWand *)
     * }
     */
    public static double PixelGetBlack(MemorySegment x0) {
        var mh$ = PixelGetBlack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetBlack", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetBlue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetBlue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double PixelGetBlue(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetBlue$descriptor() {
        return PixelGetBlue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double PixelGetBlue(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetBlue$handle() {
        return PixelGetBlue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double PixelGetBlue(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetBlue$address() {
        return PixelGetBlue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double PixelGetBlue(const PixelWand *)
     * }
     */
    public static double PixelGetBlue(MemorySegment x0) {
        var mh$ = PixelGetBlue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetBlue", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetCyan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetCyan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double PixelGetCyan(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetCyan$descriptor() {
        return PixelGetCyan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double PixelGetCyan(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetCyan$handle() {
        return PixelGetCyan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double PixelGetCyan(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetCyan$address() {
        return PixelGetCyan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double PixelGetCyan(const PixelWand *)
     * }
     */
    public static double PixelGetCyan(MemorySegment x0) {
        var mh$ = PixelGetCyan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetCyan", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetGreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetGreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double PixelGetGreen(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetGreen$descriptor() {
        return PixelGetGreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double PixelGetGreen(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetGreen$handle() {
        return PixelGetGreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double PixelGetGreen(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetGreen$address() {
        return PixelGetGreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double PixelGetGreen(const PixelWand *)
     * }
     */
    public static double PixelGetGreen(MemorySegment x0) {
        var mh$ = PixelGetGreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetGreen", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetMagenta {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetMagenta");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double PixelGetMagenta(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetMagenta$descriptor() {
        return PixelGetMagenta.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double PixelGetMagenta(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetMagenta$handle() {
        return PixelGetMagenta.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double PixelGetMagenta(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetMagenta$address() {
        return PixelGetMagenta.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double PixelGetMagenta(const PixelWand *)
     * }
     */
    public static double PixelGetMagenta(MemorySegment x0) {
        var mh$ = PixelGetMagenta.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetMagenta", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetOpacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetOpacity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double PixelGetOpacity(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetOpacity$descriptor() {
        return PixelGetOpacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double PixelGetOpacity(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetOpacity$handle() {
        return PixelGetOpacity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double PixelGetOpacity(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetOpacity$address() {
        return PixelGetOpacity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double PixelGetOpacity(const PixelWand *)
     * }
     */
    public static double PixelGetOpacity(MemorySegment x0) {
        var mh$ = PixelGetOpacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetOpacity", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetRed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetRed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double PixelGetRed(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetRed$descriptor() {
        return PixelGetRed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double PixelGetRed(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetRed$handle() {
        return PixelGetRed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double PixelGetRed(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetRed$address() {
        return PixelGetRed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double PixelGetRed(const PixelWand *)
     * }
     */
    public static double PixelGetRed(MemorySegment x0) {
        var mh$ = PixelGetRed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetRed", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetYellow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetYellow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double PixelGetYellow(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetYellow$descriptor() {
        return PixelGetYellow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double PixelGetYellow(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetYellow$handle() {
        return PixelGetYellow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double PixelGetYellow(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetYellow$address() {
        return PixelGetYellow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double PixelGetYellow(const PixelWand *)
     * }
     */
    public static double PixelGetYellow(MemorySegment x0) {
        var mh$ = PixelGetYellow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetYellow", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClonePixelWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("ClonePixelWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PixelWand *ClonePixelWand(const PixelWand *)
     * }
     */
    public static FunctionDescriptor ClonePixelWand$descriptor() {
        return ClonePixelWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PixelWand *ClonePixelWand(const PixelWand *)
     * }
     */
    public static MethodHandle ClonePixelWand$handle() {
        return ClonePixelWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern PixelWand *ClonePixelWand(const PixelWand *)
     * }
     */
    public static MemorySegment ClonePixelWand$address() {
        return ClonePixelWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern PixelWand *ClonePixelWand(const PixelWand *)
     * }
     */
    public static MemorySegment ClonePixelWand(MemorySegment x0) {
        var mh$ = ClonePixelWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClonePixelWand", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClonePixelWands {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("ClonePixelWands");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PixelWand **ClonePixelWands(const PixelWand **, const unsigned long)
     * }
     */
    public static FunctionDescriptor ClonePixelWands$descriptor() {
        return ClonePixelWands.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PixelWand **ClonePixelWands(const PixelWand **, const unsigned long)
     * }
     */
    public static MethodHandle ClonePixelWands$handle() {
        return ClonePixelWands.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern PixelWand **ClonePixelWands(const PixelWand **, const unsigned long)
     * }
     */
    public static MemorySegment ClonePixelWands$address() {
        return ClonePixelWands.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern PixelWand **ClonePixelWands(const PixelWand **, const unsigned long)
     * }
     */
    public static MemorySegment ClonePixelWands(MemorySegment x0, long x1) {
        var mh$ = ClonePixelWands.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClonePixelWands", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NewPixelWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER    );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("NewPixelWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PixelWand *NewPixelWand()
     * }
     */
    public static FunctionDescriptor NewPixelWand$descriptor() {
        return NewPixelWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PixelWand *NewPixelWand()
     * }
     */
    public static MethodHandle NewPixelWand$handle() {
        return NewPixelWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern PixelWand *NewPixelWand()
     * }
     */
    public static MemorySegment NewPixelWand$address() {
        return NewPixelWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern PixelWand *NewPixelWand()
     * }
     */
    public static MemorySegment NewPixelWand() {
        var mh$ = NewPixelWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NewPixelWand");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NewPixelWands {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("NewPixelWands");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PixelWand **NewPixelWands(const unsigned long)
     * }
     */
    public static FunctionDescriptor NewPixelWands$descriptor() {
        return NewPixelWands.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PixelWand **NewPixelWands(const unsigned long)
     * }
     */
    public static MethodHandle NewPixelWands$handle() {
        return NewPixelWands.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern PixelWand **NewPixelWands(const unsigned long)
     * }
     */
    public static MemorySegment NewPixelWands$address() {
        return NewPixelWands.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern PixelWand **NewPixelWands(const unsigned long)
     * }
     */
    public static MemorySegment NewPixelWands(long x0) {
        var mh$ = NewPixelWands.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NewPixelWands", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetBlackQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_SHORT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetBlackQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Quantum PixelGetBlackQuantum(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetBlackQuantum$descriptor() {
        return PixelGetBlackQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Quantum PixelGetBlackQuantum(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetBlackQuantum$handle() {
        return PixelGetBlackQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Quantum PixelGetBlackQuantum(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetBlackQuantum$address() {
        return PixelGetBlackQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Quantum PixelGetBlackQuantum(const PixelWand *)
     * }
     */
    public static short PixelGetBlackQuantum(MemorySegment x0) {
        var mh$ = PixelGetBlackQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetBlackQuantum", x0);
            }
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetBlueQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_SHORT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetBlueQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Quantum PixelGetBlueQuantum(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetBlueQuantum$descriptor() {
        return PixelGetBlueQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Quantum PixelGetBlueQuantum(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetBlueQuantum$handle() {
        return PixelGetBlueQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Quantum PixelGetBlueQuantum(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetBlueQuantum$address() {
        return PixelGetBlueQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Quantum PixelGetBlueQuantum(const PixelWand *)
     * }
     */
    public static short PixelGetBlueQuantum(MemorySegment x0) {
        var mh$ = PixelGetBlueQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetBlueQuantum", x0);
            }
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetCyanQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_SHORT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetCyanQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Quantum PixelGetCyanQuantum(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetCyanQuantum$descriptor() {
        return PixelGetCyanQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Quantum PixelGetCyanQuantum(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetCyanQuantum$handle() {
        return PixelGetCyanQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Quantum PixelGetCyanQuantum(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetCyanQuantum$address() {
        return PixelGetCyanQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Quantum PixelGetCyanQuantum(const PixelWand *)
     * }
     */
    public static short PixelGetCyanQuantum(MemorySegment x0) {
        var mh$ = PixelGetCyanQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetCyanQuantum", x0);
            }
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetGreenQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_SHORT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetGreenQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Quantum PixelGetGreenQuantum(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetGreenQuantum$descriptor() {
        return PixelGetGreenQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Quantum PixelGetGreenQuantum(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetGreenQuantum$handle() {
        return PixelGetGreenQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Quantum PixelGetGreenQuantum(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetGreenQuantum$address() {
        return PixelGetGreenQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Quantum PixelGetGreenQuantum(const PixelWand *)
     * }
     */
    public static short PixelGetGreenQuantum(MemorySegment x0) {
        var mh$ = PixelGetGreenQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetGreenQuantum", x0);
            }
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetMagentaQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_SHORT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetMagentaQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Quantum PixelGetMagentaQuantum(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetMagentaQuantum$descriptor() {
        return PixelGetMagentaQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Quantum PixelGetMagentaQuantum(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetMagentaQuantum$handle() {
        return PixelGetMagentaQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Quantum PixelGetMagentaQuantum(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetMagentaQuantum$address() {
        return PixelGetMagentaQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Quantum PixelGetMagentaQuantum(const PixelWand *)
     * }
     */
    public static short PixelGetMagentaQuantum(MemorySegment x0) {
        var mh$ = PixelGetMagentaQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetMagentaQuantum", x0);
            }
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetOpacityQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_SHORT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetOpacityQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Quantum PixelGetOpacityQuantum(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetOpacityQuantum$descriptor() {
        return PixelGetOpacityQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Quantum PixelGetOpacityQuantum(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetOpacityQuantum$handle() {
        return PixelGetOpacityQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Quantum PixelGetOpacityQuantum(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetOpacityQuantum$address() {
        return PixelGetOpacityQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Quantum PixelGetOpacityQuantum(const PixelWand *)
     * }
     */
    public static short PixelGetOpacityQuantum(MemorySegment x0) {
        var mh$ = PixelGetOpacityQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetOpacityQuantum", x0);
            }
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetRedQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_SHORT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetRedQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Quantum PixelGetRedQuantum(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetRedQuantum$descriptor() {
        return PixelGetRedQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Quantum PixelGetRedQuantum(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetRedQuantum$handle() {
        return PixelGetRedQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Quantum PixelGetRedQuantum(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetRedQuantum$address() {
        return PixelGetRedQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Quantum PixelGetRedQuantum(const PixelWand *)
     * }
     */
    public static short PixelGetRedQuantum(MemorySegment x0) {
        var mh$ = PixelGetRedQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetRedQuantum", x0);
            }
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetYellowQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_SHORT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetYellowQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Quantum PixelGetYellowQuantum(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetYellowQuantum$descriptor() {
        return PixelGetYellowQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Quantum PixelGetYellowQuantum(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetYellowQuantum$handle() {
        return PixelGetYellowQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Quantum PixelGetYellowQuantum(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetYellowQuantum$address() {
        return PixelGetYellowQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Quantum PixelGetYellowQuantum(const PixelWand *)
     * }
     */
    public static short PixelGetYellowQuantum(MemorySegment x0) {
        var mh$ = PixelGetYellowQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetYellowQuantum", x0);
            }
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int PixelSetColor(PixelWand *, const char *)
     * }
     */
    public static FunctionDescriptor PixelSetColor$descriptor() {
        return PixelSetColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int PixelSetColor(PixelWand *, const char *)
     * }
     */
    public static MethodHandle PixelSetColor$handle() {
        return PixelSetColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int PixelSetColor(PixelWand *, const char *)
     * }
     */
    public static MemorySegment PixelSetColor$address() {
        return PixelSetColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int PixelSetColor(PixelWand *, const char *)
     * }
     */
    public static int PixelSetColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = PixelSetColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetColorCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetColorCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long PixelGetColorCount(const PixelWand *)
     * }
     */
    public static FunctionDescriptor PixelGetColorCount$descriptor() {
        return PixelGetColorCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long PixelGetColorCount(const PixelWand *)
     * }
     */
    public static MethodHandle PixelGetColorCount$handle() {
        return PixelGetColorCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long PixelGetColorCount(const PixelWand *)
     * }
     */
    public static MemorySegment PixelGetColorCount$address() {
        return PixelGetColorCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long PixelGetColorCount(const PixelWand *)
     * }
     */
    public static long PixelGetColorCount(MemorySegment x0) {
        var mh$ = PixelGetColorCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetColorCount", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DestroyPixelWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("DestroyPixelWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void DestroyPixelWand(PixelWand *)
     * }
     */
    public static FunctionDescriptor DestroyPixelWand$descriptor() {
        return DestroyPixelWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void DestroyPixelWand(PixelWand *)
     * }
     */
    public static MethodHandle DestroyPixelWand$handle() {
        return DestroyPixelWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void DestroyPixelWand(PixelWand *)
     * }
     */
    public static MemorySegment DestroyPixelWand$address() {
        return DestroyPixelWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void DestroyPixelWand(PixelWand *)
     * }
     */
    public static void DestroyPixelWand(MemorySegment x0) {
        var mh$ = DestroyPixelWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DestroyPixelWand", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelGetQuantumColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelGetQuantumColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelGetQuantumColor(const PixelWand *, PixelPacket *)
     * }
     */
    public static FunctionDescriptor PixelGetQuantumColor$descriptor() {
        return PixelGetQuantumColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelGetQuantumColor(const PixelWand *, PixelPacket *)
     * }
     */
    public static MethodHandle PixelGetQuantumColor$handle() {
        return PixelGetQuantumColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelGetQuantumColor(const PixelWand *, PixelPacket *)
     * }
     */
    public static MemorySegment PixelGetQuantumColor$address() {
        return PixelGetQuantumColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelGetQuantumColor(const PixelWand *, PixelPacket *)
     * }
     */
    public static void PixelGetQuantumColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = PixelGetQuantumColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelGetQuantumColor", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetBlack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetBlack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetBlack(PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor PixelSetBlack$descriptor() {
        return PixelSetBlack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetBlack(PixelWand *, const double)
     * }
     */
    public static MethodHandle PixelSetBlack$handle() {
        return PixelSetBlack.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetBlack(PixelWand *, const double)
     * }
     */
    public static MemorySegment PixelSetBlack$address() {
        return PixelSetBlack.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetBlack(PixelWand *, const double)
     * }
     */
    public static void PixelSetBlack(MemorySegment x0, double x1) {
        var mh$ = PixelSetBlack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetBlack", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetBlackQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_SHORT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetBlackQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetBlackQuantum(PixelWand *, const Quantum)
     * }
     */
    public static FunctionDescriptor PixelSetBlackQuantum$descriptor() {
        return PixelSetBlackQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetBlackQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MethodHandle PixelSetBlackQuantum$handle() {
        return PixelSetBlackQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetBlackQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MemorySegment PixelSetBlackQuantum$address() {
        return PixelSetBlackQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetBlackQuantum(PixelWand *, const Quantum)
     * }
     */
    public static void PixelSetBlackQuantum(MemorySegment x0, short x1) {
        var mh$ = PixelSetBlackQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetBlackQuantum", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetBlue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetBlue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetBlue(PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor PixelSetBlue$descriptor() {
        return PixelSetBlue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetBlue(PixelWand *, const double)
     * }
     */
    public static MethodHandle PixelSetBlue$handle() {
        return PixelSetBlue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetBlue(PixelWand *, const double)
     * }
     */
    public static MemorySegment PixelSetBlue$address() {
        return PixelSetBlue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetBlue(PixelWand *, const double)
     * }
     */
    public static void PixelSetBlue(MemorySegment x0, double x1) {
        var mh$ = PixelSetBlue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetBlue", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetBlueQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_SHORT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetBlueQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetBlueQuantum(PixelWand *, const Quantum)
     * }
     */
    public static FunctionDescriptor PixelSetBlueQuantum$descriptor() {
        return PixelSetBlueQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetBlueQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MethodHandle PixelSetBlueQuantum$handle() {
        return PixelSetBlueQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetBlueQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MemorySegment PixelSetBlueQuantum$address() {
        return PixelSetBlueQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetBlueQuantum(PixelWand *, const Quantum)
     * }
     */
    public static void PixelSetBlueQuantum(MemorySegment x0, short x1) {
        var mh$ = PixelSetBlueQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetBlueQuantum", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetColorCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetColorCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetColorCount(PixelWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor PixelSetColorCount$descriptor() {
        return PixelSetColorCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetColorCount(PixelWand *, const unsigned long)
     * }
     */
    public static MethodHandle PixelSetColorCount$handle() {
        return PixelSetColorCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetColorCount(PixelWand *, const unsigned long)
     * }
     */
    public static MemorySegment PixelSetColorCount$address() {
        return PixelSetColorCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetColorCount(PixelWand *, const unsigned long)
     * }
     */
    public static void PixelSetColorCount(MemorySegment x0, long x1) {
        var mh$ = PixelSetColorCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetColorCount", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetCyan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetCyan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetCyan(PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor PixelSetCyan$descriptor() {
        return PixelSetCyan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetCyan(PixelWand *, const double)
     * }
     */
    public static MethodHandle PixelSetCyan$handle() {
        return PixelSetCyan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetCyan(PixelWand *, const double)
     * }
     */
    public static MemorySegment PixelSetCyan$address() {
        return PixelSetCyan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetCyan(PixelWand *, const double)
     * }
     */
    public static void PixelSetCyan(MemorySegment x0, double x1) {
        var mh$ = PixelSetCyan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetCyan", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetCyanQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_SHORT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetCyanQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetCyanQuantum(PixelWand *, const Quantum)
     * }
     */
    public static FunctionDescriptor PixelSetCyanQuantum$descriptor() {
        return PixelSetCyanQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetCyanQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MethodHandle PixelSetCyanQuantum$handle() {
        return PixelSetCyanQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetCyanQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MemorySegment PixelSetCyanQuantum$address() {
        return PixelSetCyanQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetCyanQuantum(PixelWand *, const Quantum)
     * }
     */
    public static void PixelSetCyanQuantum(MemorySegment x0, short x1) {
        var mh$ = PixelSetCyanQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetCyanQuantum", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetGreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetGreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetGreen(PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor PixelSetGreen$descriptor() {
        return PixelSetGreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetGreen(PixelWand *, const double)
     * }
     */
    public static MethodHandle PixelSetGreen$handle() {
        return PixelSetGreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetGreen(PixelWand *, const double)
     * }
     */
    public static MemorySegment PixelSetGreen$address() {
        return PixelSetGreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetGreen(PixelWand *, const double)
     * }
     */
    public static void PixelSetGreen(MemorySegment x0, double x1) {
        var mh$ = PixelSetGreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetGreen", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetGreenQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_SHORT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetGreenQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetGreenQuantum(PixelWand *, const Quantum)
     * }
     */
    public static FunctionDescriptor PixelSetGreenQuantum$descriptor() {
        return PixelSetGreenQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetGreenQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MethodHandle PixelSetGreenQuantum$handle() {
        return PixelSetGreenQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetGreenQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MemorySegment PixelSetGreenQuantum$address() {
        return PixelSetGreenQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetGreenQuantum(PixelWand *, const Quantum)
     * }
     */
    public static void PixelSetGreenQuantum(MemorySegment x0, short x1) {
        var mh$ = PixelSetGreenQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetGreenQuantum", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetMagenta {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetMagenta");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetMagenta(PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor PixelSetMagenta$descriptor() {
        return PixelSetMagenta.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetMagenta(PixelWand *, const double)
     * }
     */
    public static MethodHandle PixelSetMagenta$handle() {
        return PixelSetMagenta.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetMagenta(PixelWand *, const double)
     * }
     */
    public static MemorySegment PixelSetMagenta$address() {
        return PixelSetMagenta.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetMagenta(PixelWand *, const double)
     * }
     */
    public static void PixelSetMagenta(MemorySegment x0, double x1) {
        var mh$ = PixelSetMagenta.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetMagenta", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetMagentaQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_SHORT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetMagentaQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetMagentaQuantum(PixelWand *, const Quantum)
     * }
     */
    public static FunctionDescriptor PixelSetMagentaQuantum$descriptor() {
        return PixelSetMagentaQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetMagentaQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MethodHandle PixelSetMagentaQuantum$handle() {
        return PixelSetMagentaQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetMagentaQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MemorySegment PixelSetMagentaQuantum$address() {
        return PixelSetMagentaQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetMagentaQuantum(PixelWand *, const Quantum)
     * }
     */
    public static void PixelSetMagentaQuantum(MemorySegment x0, short x1) {
        var mh$ = PixelSetMagentaQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetMagentaQuantum", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetOpacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetOpacity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetOpacity(PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor PixelSetOpacity$descriptor() {
        return PixelSetOpacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetOpacity(PixelWand *, const double)
     * }
     */
    public static MethodHandle PixelSetOpacity$handle() {
        return PixelSetOpacity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetOpacity(PixelWand *, const double)
     * }
     */
    public static MemorySegment PixelSetOpacity$address() {
        return PixelSetOpacity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetOpacity(PixelWand *, const double)
     * }
     */
    public static void PixelSetOpacity(MemorySegment x0, double x1) {
        var mh$ = PixelSetOpacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetOpacity", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetOpacityQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_SHORT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetOpacityQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetOpacityQuantum(PixelWand *, const Quantum)
     * }
     */
    public static FunctionDescriptor PixelSetOpacityQuantum$descriptor() {
        return PixelSetOpacityQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetOpacityQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MethodHandle PixelSetOpacityQuantum$handle() {
        return PixelSetOpacityQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetOpacityQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MemorySegment PixelSetOpacityQuantum$address() {
        return PixelSetOpacityQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetOpacityQuantum(PixelWand *, const Quantum)
     * }
     */
    public static void PixelSetOpacityQuantum(MemorySegment x0, short x1) {
        var mh$ = PixelSetOpacityQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetOpacityQuantum", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetQuantumColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetQuantumColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetQuantumColor(PixelWand *, const PixelPacket *)
     * }
     */
    public static FunctionDescriptor PixelSetQuantumColor$descriptor() {
        return PixelSetQuantumColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetQuantumColor(PixelWand *, const PixelPacket *)
     * }
     */
    public static MethodHandle PixelSetQuantumColor$handle() {
        return PixelSetQuantumColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetQuantumColor(PixelWand *, const PixelPacket *)
     * }
     */
    public static MemorySegment PixelSetQuantumColor$address() {
        return PixelSetQuantumColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetQuantumColor(PixelWand *, const PixelPacket *)
     * }
     */
    public static void PixelSetQuantumColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = PixelSetQuantumColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetQuantumColor", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetRed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetRed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetRed(PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor PixelSetRed$descriptor() {
        return PixelSetRed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetRed(PixelWand *, const double)
     * }
     */
    public static MethodHandle PixelSetRed$handle() {
        return PixelSetRed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetRed(PixelWand *, const double)
     * }
     */
    public static MemorySegment PixelSetRed$address() {
        return PixelSetRed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetRed(PixelWand *, const double)
     * }
     */
    public static void PixelSetRed(MemorySegment x0, double x1) {
        var mh$ = PixelSetRed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetRed", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetRedQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_SHORT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetRedQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetRedQuantum(PixelWand *, const Quantum)
     * }
     */
    public static FunctionDescriptor PixelSetRedQuantum$descriptor() {
        return PixelSetRedQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetRedQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MethodHandle PixelSetRedQuantum$handle() {
        return PixelSetRedQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetRedQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MemorySegment PixelSetRedQuantum$address() {
        return PixelSetRedQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetRedQuantum(PixelWand *, const Quantum)
     * }
     */
    public static void PixelSetRedQuantum(MemorySegment x0, short x1) {
        var mh$ = PixelSetRedQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetRedQuantum", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetYellow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetYellow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetYellow(PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor PixelSetYellow$descriptor() {
        return PixelSetYellow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetYellow(PixelWand *, const double)
     * }
     */
    public static MethodHandle PixelSetYellow$handle() {
        return PixelSetYellow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetYellow(PixelWand *, const double)
     * }
     */
    public static MemorySegment PixelSetYellow$address() {
        return PixelSetYellow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetYellow(PixelWand *, const double)
     * }
     */
    public static void PixelSetYellow(MemorySegment x0, double x1) {
        var mh$ = PixelSetYellow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetYellow", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PixelSetYellowQuantum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_SHORT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("PixelSetYellowQuantum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void PixelSetYellowQuantum(PixelWand *, const Quantum)
     * }
     */
    public static FunctionDescriptor PixelSetYellowQuantum$descriptor() {
        return PixelSetYellowQuantum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void PixelSetYellowQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MethodHandle PixelSetYellowQuantum$handle() {
        return PixelSetYellowQuantum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void PixelSetYellowQuantum(PixelWand *, const Quantum)
     * }
     */
    public static MemorySegment PixelSetYellowQuantum$address() {
        return PixelSetYellowQuantum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void PixelSetYellowQuantum(PixelWand *, const Quantum)
     * }
     */
    public static void PixelSetYellowQuantum(MemorySegment x0, short x1) {
        var mh$ = PixelSetYellowQuantum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PixelSetYellowQuantum", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetClipPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetClipPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetClipPath(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetClipPath$descriptor() {
        return MagickDrawGetClipPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetClipPath(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetClipPath$handle() {
        return MagickDrawGetClipPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetClipPath(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetClipPath$address() {
        return MagickDrawGetClipPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickDrawGetClipPath(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetClipPath(MemorySegment x0) {
        var mh$ = MagickDrawGetClipPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetClipPath", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetException {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetException");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetException(const DrawingWand *, ExceptionType *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetException$descriptor() {
        return MagickDrawGetException.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetException(const DrawingWand *, ExceptionType *)
     * }
     */
    public static MethodHandle MagickDrawGetException$handle() {
        return MagickDrawGetException.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetException(const DrawingWand *, ExceptionType *)
     * }
     */
    public static MemorySegment MagickDrawGetException$address() {
        return MagickDrawGetException.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickDrawGetException(const DrawingWand *, ExceptionType *)
     * }
     */
    public static MemorySegment MagickDrawGetException(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawGetException.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetException", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetFont(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetFont$descriptor() {
        return MagickDrawGetFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetFont(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetFont$handle() {
        return MagickDrawGetFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetFont(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetFont$address() {
        return MagickDrawGetFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickDrawGetFont(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetFont(MemorySegment x0) {
        var mh$ = MagickDrawGetFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetFont", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetFontFamily {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetFontFamily");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetFontFamily(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetFontFamily$descriptor() {
        return MagickDrawGetFontFamily.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetFontFamily(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetFontFamily$handle() {
        return MagickDrawGetFontFamily.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetFontFamily(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetFontFamily$address() {
        return MagickDrawGetFontFamily.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickDrawGetFontFamily(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetFontFamily(MemorySegment x0) {
        var mh$ = MagickDrawGetFontFamily.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetFontFamily", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetTextEncoding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetTextEncoding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetTextEncoding(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetTextEncoding$descriptor() {
        return MagickDrawGetTextEncoding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetTextEncoding(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetTextEncoding$handle() {
        return MagickDrawGetTextEncoding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickDrawGetTextEncoding(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetTextEncoding$address() {
        return MagickDrawGetTextEncoding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickDrawGetTextEncoding(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetTextEncoding(MemorySegment x0) {
        var mh$ = MagickDrawGetTextEncoding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetTextEncoding", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetClipUnits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetClipUnits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ClipPathUnits MagickDrawGetClipUnits(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetClipUnits$descriptor() {
        return MagickDrawGetClipUnits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ClipPathUnits MagickDrawGetClipUnits(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetClipUnits$handle() {
        return MagickDrawGetClipUnits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ClipPathUnits MagickDrawGetClipUnits(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetClipUnits$address() {
        return MagickDrawGetClipUnits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ClipPathUnits MagickDrawGetClipUnits(const DrawingWand *)
     * }
     */
    public static int MagickDrawGetClipUnits(MemorySegment x0) {
        var mh$ = MagickDrawGetClipUnits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetClipUnits", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetTextDecoration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetTextDecoration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DecorationType MagickDrawGetTextDecoration(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetTextDecoration$descriptor() {
        return MagickDrawGetTextDecoration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DecorationType MagickDrawGetTextDecoration(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetTextDecoration$handle() {
        return MagickDrawGetTextDecoration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DecorationType MagickDrawGetTextDecoration(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetTextDecoration$address() {
        return MagickDrawGetTextDecoration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DecorationType MagickDrawGetTextDecoration(const DrawingWand *)
     * }
     */
    public static int MagickDrawGetTextDecoration(MemorySegment x0) {
        var mh$ = MagickDrawGetTextDecoration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetTextDecoration", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetFillOpacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetFillOpacity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double MagickDrawGetFillOpacity(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetFillOpacity$descriptor() {
        return MagickDrawGetFillOpacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double MagickDrawGetFillOpacity(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetFillOpacity$handle() {
        return MagickDrawGetFillOpacity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double MagickDrawGetFillOpacity(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetFillOpacity$address() {
        return MagickDrawGetFillOpacity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double MagickDrawGetFillOpacity(const DrawingWand *)
     * }
     */
    public static double MagickDrawGetFillOpacity(MemorySegment x0) {
        var mh$ = MagickDrawGetFillOpacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetFillOpacity", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetFontSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetFontSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double MagickDrawGetFontSize(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetFontSize$descriptor() {
        return MagickDrawGetFontSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double MagickDrawGetFontSize(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetFontSize$handle() {
        return MagickDrawGetFontSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double MagickDrawGetFontSize(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetFontSize$address() {
        return MagickDrawGetFontSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double MagickDrawGetFontSize(const DrawingWand *)
     * }
     */
    public static double MagickDrawGetFontSize(MemorySegment x0) {
        var mh$ = MagickDrawGetFontSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetFontSize", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetStrokeDashArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetStrokeDashArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double *MagickDrawGetStrokeDashArray(const DrawingWand *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetStrokeDashArray$descriptor() {
        return MagickDrawGetStrokeDashArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double *MagickDrawGetStrokeDashArray(const DrawingWand *, unsigned long *)
     * }
     */
    public static MethodHandle MagickDrawGetStrokeDashArray$handle() {
        return MagickDrawGetStrokeDashArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double *MagickDrawGetStrokeDashArray(const DrawingWand *, unsigned long *)
     * }
     */
    public static MemorySegment MagickDrawGetStrokeDashArray$address() {
        return MagickDrawGetStrokeDashArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double *MagickDrawGetStrokeDashArray(const DrawingWand *, unsigned long *)
     * }
     */
    public static MemorySegment MagickDrawGetStrokeDashArray(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawGetStrokeDashArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetStrokeDashArray", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetStrokeDashOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetStrokeDashOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double MagickDrawGetStrokeDashOffset(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetStrokeDashOffset$descriptor() {
        return MagickDrawGetStrokeDashOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double MagickDrawGetStrokeDashOffset(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetStrokeDashOffset$handle() {
        return MagickDrawGetStrokeDashOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double MagickDrawGetStrokeDashOffset(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetStrokeDashOffset$address() {
        return MagickDrawGetStrokeDashOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double MagickDrawGetStrokeDashOffset(const DrawingWand *)
     * }
     */
    public static double MagickDrawGetStrokeDashOffset(MemorySegment x0) {
        var mh$ = MagickDrawGetStrokeDashOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetStrokeDashOffset", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetStrokeOpacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetStrokeOpacity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double MagickDrawGetStrokeOpacity(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetStrokeOpacity$descriptor() {
        return MagickDrawGetStrokeOpacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double MagickDrawGetStrokeOpacity(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetStrokeOpacity$handle() {
        return MagickDrawGetStrokeOpacity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double MagickDrawGetStrokeOpacity(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetStrokeOpacity$address() {
        return MagickDrawGetStrokeOpacity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double MagickDrawGetStrokeOpacity(const DrawingWand *)
     * }
     */
    public static double MagickDrawGetStrokeOpacity(MemorySegment x0) {
        var mh$ = MagickDrawGetStrokeOpacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetStrokeOpacity", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetStrokeWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetStrokeWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double MagickDrawGetStrokeWidth(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetStrokeWidth$descriptor() {
        return MagickDrawGetStrokeWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double MagickDrawGetStrokeWidth(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetStrokeWidth$handle() {
        return MagickDrawGetStrokeWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double MagickDrawGetStrokeWidth(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetStrokeWidth$address() {
        return MagickDrawGetStrokeWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double MagickDrawGetStrokeWidth(const DrawingWand *)
     * }
     */
    public static double MagickDrawGetStrokeWidth(MemorySegment x0) {
        var mh$ = MagickDrawGetStrokeWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetStrokeWidth", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPeekGraphicContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPeekGraphicContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DrawInfo *MagickDrawPeekGraphicContext(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawPeekGraphicContext$descriptor() {
        return MagickDrawPeekGraphicContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DrawInfo *MagickDrawPeekGraphicContext(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawPeekGraphicContext$handle() {
        return MagickDrawPeekGraphicContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DrawInfo *MagickDrawPeekGraphicContext(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawPeekGraphicContext$address() {
        return MagickDrawPeekGraphicContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DrawInfo *MagickDrawPeekGraphicContext(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawPeekGraphicContext(MemorySegment x0) {
        var mh$ = MagickDrawPeekGraphicContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPeekGraphicContext", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCloneDrawingWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickCloneDrawingWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DrawingWand *MagickCloneDrawingWand(const DrawingWand *drawing_wand)
     * }
     */
    public static FunctionDescriptor MagickCloneDrawingWand$descriptor() {
        return MagickCloneDrawingWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DrawingWand *MagickCloneDrawingWand(const DrawingWand *drawing_wand)
     * }
     */
    public static MethodHandle MagickCloneDrawingWand$handle() {
        return MagickCloneDrawingWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DrawingWand *MagickCloneDrawingWand(const DrawingWand *drawing_wand)
     * }
     */
    public static MemorySegment MagickCloneDrawingWand$address() {
        return MagickCloneDrawingWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DrawingWand *MagickCloneDrawingWand(const DrawingWand *drawing_wand)
     * }
     */
    public static MemorySegment MagickCloneDrawingWand(MemorySegment drawing_wand) {
        var mh$ = MagickCloneDrawingWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCloneDrawingWand", drawing_wand);
            }
            return (MemorySegment)mh$.invokeExact(drawing_wand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawAllocateWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawAllocateWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DrawingWand *MagickDrawAllocateWand(const DrawInfo *, Image *)
     * }
     */
    public static FunctionDescriptor MagickDrawAllocateWand$descriptor() {
        return MagickDrawAllocateWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DrawingWand *MagickDrawAllocateWand(const DrawInfo *, Image *)
     * }
     */
    public static MethodHandle MagickDrawAllocateWand$handle() {
        return MagickDrawAllocateWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DrawingWand *MagickDrawAllocateWand(const DrawInfo *, Image *)
     * }
     */
    public static MemorySegment MagickDrawAllocateWand$address() {
        return MagickDrawAllocateWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DrawingWand *MagickDrawAllocateWand(const DrawInfo *, Image *)
     * }
     */
    public static MemorySegment MagickDrawAllocateWand(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawAllocateWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawAllocateWand", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNewDrawingWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER    );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickNewDrawingWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DrawingWand *MagickNewDrawingWand()
     * }
     */
    public static FunctionDescriptor MagickNewDrawingWand$descriptor() {
        return MagickNewDrawingWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DrawingWand *MagickNewDrawingWand()
     * }
     */
    public static MethodHandle MagickNewDrawingWand$handle() {
        return MagickNewDrawingWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DrawingWand *MagickNewDrawingWand()
     * }
     */
    public static MemorySegment MagickNewDrawingWand$address() {
        return MagickNewDrawingWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DrawingWand *MagickNewDrawingWand()
     * }
     */
    public static MemorySegment MagickNewDrawingWand() {
        var mh$ = MagickNewDrawingWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNewDrawingWand");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetClipRule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetClipRule");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FillRule MagickDrawGetClipRule(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetClipRule$descriptor() {
        return MagickDrawGetClipRule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FillRule MagickDrawGetClipRule(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetClipRule$handle() {
        return MagickDrawGetClipRule.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FillRule MagickDrawGetClipRule(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetClipRule$address() {
        return MagickDrawGetClipRule.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FillRule MagickDrawGetClipRule(const DrawingWand *)
     * }
     */
    public static int MagickDrawGetClipRule(MemorySegment x0) {
        var mh$ = MagickDrawGetClipRule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetClipRule", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetFillRule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetFillRule");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FillRule MagickDrawGetFillRule(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetFillRule$descriptor() {
        return MagickDrawGetFillRule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FillRule MagickDrawGetFillRule(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetFillRule$handle() {
        return MagickDrawGetFillRule.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FillRule MagickDrawGetFillRule(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetFillRule$address() {
        return MagickDrawGetFillRule.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FillRule MagickDrawGetFillRule(const DrawingWand *)
     * }
     */
    public static int MagickDrawGetFillRule(MemorySegment x0) {
        var mh$ = MagickDrawGetFillRule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetFillRule", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetGravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetGravity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GravityType MagickDrawGetGravity(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetGravity$descriptor() {
        return MagickDrawGetGravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GravityType MagickDrawGetGravity(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetGravity$handle() {
        return MagickDrawGetGravity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GravityType MagickDrawGetGravity(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetGravity$address() {
        return MagickDrawGetGravity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GravityType MagickDrawGetGravity(const DrawingWand *)
     * }
     */
    public static int MagickDrawGetGravity(MemorySegment x0) {
        var mh$ = MagickDrawGetGravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetGravity", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetStrokeLineCap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetStrokeLineCap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LineCap MagickDrawGetStrokeLineCap(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetStrokeLineCap$descriptor() {
        return MagickDrawGetStrokeLineCap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LineCap MagickDrawGetStrokeLineCap(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetStrokeLineCap$handle() {
        return MagickDrawGetStrokeLineCap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LineCap MagickDrawGetStrokeLineCap(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetStrokeLineCap$address() {
        return MagickDrawGetStrokeLineCap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LineCap MagickDrawGetStrokeLineCap(const DrawingWand *)
     * }
     */
    public static int MagickDrawGetStrokeLineCap(MemorySegment x0) {
        var mh$ = MagickDrawGetStrokeLineCap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetStrokeLineCap", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetStrokeLineJoin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetStrokeLineJoin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LineJoin MagickDrawGetStrokeLineJoin(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetStrokeLineJoin$descriptor() {
        return MagickDrawGetStrokeLineJoin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LineJoin MagickDrawGetStrokeLineJoin(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetStrokeLineJoin$handle() {
        return MagickDrawGetStrokeLineJoin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LineJoin MagickDrawGetStrokeLineJoin(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetStrokeLineJoin$address() {
        return MagickDrawGetStrokeLineJoin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LineJoin MagickDrawGetStrokeLineJoin(const DrawingWand *)
     * }
     */
    public static int MagickDrawGetStrokeLineJoin(MemorySegment x0) {
        var mh$ = MagickDrawGetStrokeLineJoin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetStrokeLineJoin", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetFontStretch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetFontStretch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern StretchType MagickDrawGetFontStretch(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetFontStretch$descriptor() {
        return MagickDrawGetFontStretch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern StretchType MagickDrawGetFontStretch(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetFontStretch$handle() {
        return MagickDrawGetFontStretch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern StretchType MagickDrawGetFontStretch(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetFontStretch$address() {
        return MagickDrawGetFontStretch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern StretchType MagickDrawGetFontStretch(const DrawingWand *)
     * }
     */
    public static int MagickDrawGetFontStretch(MemorySegment x0) {
        var mh$ = MagickDrawGetFontStretch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetFontStretch", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetFontStyle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetFontStyle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern StyleType MagickDrawGetFontStyle(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetFontStyle$descriptor() {
        return MagickDrawGetFontStyle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern StyleType MagickDrawGetFontStyle(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetFontStyle$handle() {
        return MagickDrawGetFontStyle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern StyleType MagickDrawGetFontStyle(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetFontStyle$address() {
        return MagickDrawGetFontStyle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern StyleType MagickDrawGetFontStyle(const DrawingWand *)
     * }
     */
    public static int MagickDrawGetFontStyle(MemorySegment x0) {
        var mh$ = MagickDrawGetFontStyle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetFontStyle", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawClearException {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawClearException");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawClearException(DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawClearException$descriptor() {
        return MagickDrawClearException.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawClearException(DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawClearException$handle() {
        return MagickDrawClearException.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawClearException(DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawClearException$address() {
        return MagickDrawClearException.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickDrawClearException(DrawingWand *)
     * }
     */
    public static int MagickDrawClearException(MemorySegment x0) {
        var mh$ = MagickDrawClearException.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawClearException", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetStrokeAntialias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetStrokeAntialias");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawGetStrokeAntialias(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetStrokeAntialias$descriptor() {
        return MagickDrawGetStrokeAntialias.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawGetStrokeAntialias(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetStrokeAntialias$handle() {
        return MagickDrawGetStrokeAntialias.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawGetStrokeAntialias(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetStrokeAntialias$address() {
        return MagickDrawGetStrokeAntialias.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickDrawGetStrokeAntialias(const DrawingWand *)
     * }
     */
    public static int MagickDrawGetStrokeAntialias(MemorySegment x0) {
        var mh$ = MagickDrawGetStrokeAntialias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetStrokeAntialias", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetTextAntialias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetTextAntialias");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawGetTextAntialias(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetTextAntialias$descriptor() {
        return MagickDrawGetTextAntialias.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawGetTextAntialias(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetTextAntialias$handle() {
        return MagickDrawGetTextAntialias.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawGetTextAntialias(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetTextAntialias$address() {
        return MagickDrawGetTextAntialias.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickDrawGetTextAntialias(const DrawingWand *)
     * }
     */
    public static int MagickDrawGetTextAntialias(MemorySegment x0) {
        var mh$ = MagickDrawGetTextAntialias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetTextAntialias", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawRender {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawRender");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawRender(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawRender$descriptor() {
        return MagickDrawRender.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawRender(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawRender$handle() {
        return MagickDrawRender.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawRender(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawRender$address() {
        return MagickDrawRender.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickDrawRender(const DrawingWand *)
     * }
     */
    public static int MagickDrawRender(MemorySegment x0) {
        var mh$ = MagickDrawRender.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawRender", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetFontWeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetFontWeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickDrawGetFontWeight(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetFontWeight$descriptor() {
        return MagickDrawGetFontWeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickDrawGetFontWeight(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetFontWeight$handle() {
        return MagickDrawGetFontWeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickDrawGetFontWeight(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetFontWeight$address() {
        return MagickDrawGetFontWeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickDrawGetFontWeight(const DrawingWand *)
     * }
     */
    public static long MagickDrawGetFontWeight(MemorySegment x0) {
        var mh$ = MagickDrawGetFontWeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetFontWeight", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetStrokeMiterLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetStrokeMiterLimit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickDrawGetStrokeMiterLimit(const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetStrokeMiterLimit$descriptor() {
        return MagickDrawGetStrokeMiterLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickDrawGetStrokeMiterLimit(const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawGetStrokeMiterLimit$handle() {
        return MagickDrawGetStrokeMiterLimit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickDrawGetStrokeMiterLimit(const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawGetStrokeMiterLimit$address() {
        return MagickDrawGetStrokeMiterLimit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickDrawGetStrokeMiterLimit(const DrawingWand *)
     * }
     */
    public static long MagickDrawGetStrokeMiterLimit(MemorySegment x0) {
        var mh$ = MagickDrawGetStrokeMiterLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetStrokeMiterLimit", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawAffine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawAffine");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawAffine(DrawingWand *, const AffineMatrix *)
     * }
     */
    public static FunctionDescriptor MagickDrawAffine$descriptor() {
        return MagickDrawAffine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawAffine(DrawingWand *, const AffineMatrix *)
     * }
     */
    public static MethodHandle MagickDrawAffine$handle() {
        return MagickDrawAffine.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawAffine(DrawingWand *, const AffineMatrix *)
     * }
     */
    public static MemorySegment MagickDrawAffine$address() {
        return MagickDrawAffine.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawAffine(DrawingWand *, const AffineMatrix *)
     * }
     */
    public static void MagickDrawAffine(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawAffine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawAffine", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawAnnotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawAnnotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawAnnotation(DrawingWand *, const double, const double, const unsigned char *)
     * }
     */
    public static FunctionDescriptor MagickDrawAnnotation$descriptor() {
        return MagickDrawAnnotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawAnnotation(DrawingWand *, const double, const double, const unsigned char *)
     * }
     */
    public static MethodHandle MagickDrawAnnotation$handle() {
        return MagickDrawAnnotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawAnnotation(DrawingWand *, const double, const double, const unsigned char *)
     * }
     */
    public static MemorySegment MagickDrawAnnotation$address() {
        return MagickDrawAnnotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawAnnotation(DrawingWand *, const double, const double, const unsigned char *)
     * }
     */
    public static void MagickDrawAnnotation(MemorySegment x0, double x1, double x2, MemorySegment x3) {
        var mh$ = MagickDrawAnnotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawAnnotation", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawArc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawArc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawArc(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawArc$descriptor() {
        return MagickDrawArc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawArc(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawArc$handle() {
        return MagickDrawArc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawArc(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawArc$address() {
        return MagickDrawArc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawArc(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static void MagickDrawArc(MemorySegment x0, double x1, double x2, double x3, double x4, double x5, double x6) {
        var mh$ = MagickDrawArc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawArc", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawBezier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawBezier");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawBezier(DrawingWand *, const unsigned long, const PointInfo *)
     * }
     */
    public static FunctionDescriptor MagickDrawBezier$descriptor() {
        return MagickDrawBezier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawBezier(DrawingWand *, const unsigned long, const PointInfo *)
     * }
     */
    public static MethodHandle MagickDrawBezier$handle() {
        return MagickDrawBezier.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawBezier(DrawingWand *, const unsigned long, const PointInfo *)
     * }
     */
    public static MemorySegment MagickDrawBezier$address() {
        return MagickDrawBezier.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawBezier(DrawingWand *, const unsigned long, const PointInfo *)
     * }
     */
    public static void MagickDrawBezier(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickDrawBezier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawBezier", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawCircle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawCircle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawCircle(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawCircle$descriptor() {
        return MagickDrawCircle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawCircle(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawCircle$handle() {
        return MagickDrawCircle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawCircle(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawCircle$address() {
        return MagickDrawCircle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawCircle(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static void MagickDrawCircle(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickDrawCircle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawCircle", x0, x1, x2, x3, x4);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawColor(DrawingWand *, const double, const double, const PaintMethod)
     * }
     */
    public static FunctionDescriptor MagickDrawColor$descriptor() {
        return MagickDrawColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawColor(DrawingWand *, const double, const double, const PaintMethod)
     * }
     */
    public static MethodHandle MagickDrawColor$handle() {
        return MagickDrawColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawColor(DrawingWand *, const double, const double, const PaintMethod)
     * }
     */
    public static MemorySegment MagickDrawColor$address() {
        return MagickDrawColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawColor(DrawingWand *, const double, const double, const PaintMethod)
     * }
     */
    public static void MagickDrawColor(MemorySegment x0, double x1, double x2, int x3) {
        var mh$ = MagickDrawColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawColor", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawComment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawComment");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawComment(DrawingWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDrawComment$descriptor() {
        return MagickDrawComment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawComment(DrawingWand *, const char *)
     * }
     */
    public static MethodHandle MagickDrawComment$handle() {
        return MagickDrawComment.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawComment(DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickDrawComment$address() {
        return MagickDrawComment.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawComment(DrawingWand *, const char *)
     * }
     */
    public static void MagickDrawComment(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawComment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawComment", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDestroyDrawingWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDestroyDrawingWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDestroyDrawingWand(DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDestroyDrawingWand$descriptor() {
        return MagickDestroyDrawingWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDestroyDrawingWand(DrawingWand *)
     * }
     */
    public static MethodHandle MagickDestroyDrawingWand$handle() {
        return MagickDestroyDrawingWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDestroyDrawingWand(DrawingWand *)
     * }
     */
    public static MemorySegment MagickDestroyDrawingWand$address() {
        return MagickDestroyDrawingWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDestroyDrawingWand(DrawingWand *)
     * }
     */
    public static void MagickDestroyDrawingWand(MemorySegment x0) {
        var mh$ = MagickDestroyDrawingWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDestroyDrawingWand", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawEllipse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawEllipse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawEllipse(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawEllipse$descriptor() {
        return MagickDrawEllipse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawEllipse(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawEllipse$handle() {
        return MagickDrawEllipse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawEllipse(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawEllipse$address() {
        return MagickDrawEllipse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawEllipse(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static void MagickDrawEllipse(MemorySegment x0, double x1, double x2, double x3, double x4, double x5, double x6) {
        var mh$ = MagickDrawEllipse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawEllipse", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawComposite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawComposite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawComposite(DrawingWand *, const CompositeOperator, const double, const double, const double, const double, const Image *)
     * }
     */
    public static FunctionDescriptor MagickDrawComposite$descriptor() {
        return MagickDrawComposite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawComposite(DrawingWand *, const CompositeOperator, const double, const double, const double, const double, const Image *)
     * }
     */
    public static MethodHandle MagickDrawComposite$handle() {
        return MagickDrawComposite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawComposite(DrawingWand *, const CompositeOperator, const double, const double, const double, const double, const Image *)
     * }
     */
    public static MemorySegment MagickDrawComposite$address() {
        return MagickDrawComposite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawComposite(DrawingWand *, const CompositeOperator, const double, const double, const double, const double, const Image *)
     * }
     */
    public static void MagickDrawComposite(MemorySegment x0, int x1, double x2, double x3, double x4, double x5, MemorySegment x6) {
        var mh$ = MagickDrawComposite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawComposite", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetFillColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetFillColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawGetFillColor(const DrawingWand *, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetFillColor$descriptor() {
        return MagickDrawGetFillColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawGetFillColor(const DrawingWand *, PixelWand *)
     * }
     */
    public static MethodHandle MagickDrawGetFillColor$handle() {
        return MagickDrawGetFillColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawGetFillColor(const DrawingWand *, PixelWand *)
     * }
     */
    public static MemorySegment MagickDrawGetFillColor$address() {
        return MagickDrawGetFillColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawGetFillColor(const DrawingWand *, PixelWand *)
     * }
     */
    public static void MagickDrawGetFillColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawGetFillColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetFillColor", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetStrokeColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetStrokeColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawGetStrokeColor(const DrawingWand *, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetStrokeColor$descriptor() {
        return MagickDrawGetStrokeColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawGetStrokeColor(const DrawingWand *, PixelWand *)
     * }
     */
    public static MethodHandle MagickDrawGetStrokeColor$handle() {
        return MagickDrawGetStrokeColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawGetStrokeColor(const DrawingWand *, PixelWand *)
     * }
     */
    public static MemorySegment MagickDrawGetStrokeColor$address() {
        return MagickDrawGetStrokeColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawGetStrokeColor(const DrawingWand *, PixelWand *)
     * }
     */
    public static void MagickDrawGetStrokeColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawGetStrokeColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetStrokeColor", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawGetTextUnderColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawGetTextUnderColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawGetTextUnderColor(const DrawingWand *, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawGetTextUnderColor$descriptor() {
        return MagickDrawGetTextUnderColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawGetTextUnderColor(const DrawingWand *, PixelWand *)
     * }
     */
    public static MethodHandle MagickDrawGetTextUnderColor$handle() {
        return MagickDrawGetTextUnderColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawGetTextUnderColor(const DrawingWand *, PixelWand *)
     * }
     */
    public static MemorySegment MagickDrawGetTextUnderColor$address() {
        return MagickDrawGetTextUnderColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawGetTextUnderColor(const DrawingWand *, PixelWand *)
     * }
     */
    public static void MagickDrawGetTextUnderColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawGetTextUnderColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawGetTextUnderColor", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawLine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawLine");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawLine(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawLine$descriptor() {
        return MagickDrawLine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawLine(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawLine$handle() {
        return MagickDrawLine.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawLine(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawLine$address() {
        return MagickDrawLine.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawLine(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static void MagickDrawLine(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickDrawLine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawLine", x0, x1, x2, x3, x4);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawMatte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawMatte");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawMatte(DrawingWand *, const double, const double, const PaintMethod)
     * }
     */
    public static FunctionDescriptor MagickDrawMatte$descriptor() {
        return MagickDrawMatte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawMatte(DrawingWand *, const double, const double, const PaintMethod)
     * }
     */
    public static MethodHandle MagickDrawMatte$handle() {
        return MagickDrawMatte.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawMatte(DrawingWand *, const double, const double, const PaintMethod)
     * }
     */
    public static MemorySegment MagickDrawMatte$address() {
        return MagickDrawMatte.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawMatte(DrawingWand *, const double, const double, const PaintMethod)
     * }
     */
    public static void MagickDrawMatte(MemorySegment x0, double x1, double x2, int x3) {
        var mh$ = MagickDrawMatte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawMatte", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathClose(DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawPathClose$descriptor() {
        return MagickDrawPathClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathClose(DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawPathClose$handle() {
        return MagickDrawPathClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathClose(DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawPathClose$address() {
        return MagickDrawPathClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathClose(DrawingWand *)
     * }
     */
    public static void MagickDrawPathClose(MemorySegment x0) {
        var mh$ = MagickDrawPathClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathClose", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathCurveToAbsolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathCurveToAbsolute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToAbsolute(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathCurveToAbsolute$descriptor() {
        return MagickDrawPathCurveToAbsolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToAbsolute(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathCurveToAbsolute$handle() {
        return MagickDrawPathCurveToAbsolute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToAbsolute(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathCurveToAbsolute$address() {
        return MagickDrawPathCurveToAbsolute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToAbsolute(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static void MagickDrawPathCurveToAbsolute(MemorySegment x0, double x1, double x2, double x3, double x4, double x5, double x6) {
        var mh$ = MagickDrawPathCurveToAbsolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathCurveToAbsolute", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathCurveToRelative {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathCurveToRelative");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToRelative(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathCurveToRelative$descriptor() {
        return MagickDrawPathCurveToRelative.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToRelative(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathCurveToRelative$handle() {
        return MagickDrawPathCurveToRelative.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToRelative(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathCurveToRelative$address() {
        return MagickDrawPathCurveToRelative.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToRelative(DrawingWand *, const double, const double, const double, const double, const double, const double)
     * }
     */
    public static void MagickDrawPathCurveToRelative(MemorySegment x0, double x1, double x2, double x3, double x4, double x5, double x6) {
        var mh$ = MagickDrawPathCurveToRelative.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathCurveToRelative", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathCurveToQuadraticBezierAbsolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathCurveToQuadraticBezierAbsolute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierAbsolute(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathCurveToQuadraticBezierAbsolute$descriptor() {
        return MagickDrawPathCurveToQuadraticBezierAbsolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierAbsolute(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathCurveToQuadraticBezierAbsolute$handle() {
        return MagickDrawPathCurveToQuadraticBezierAbsolute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierAbsolute(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathCurveToQuadraticBezierAbsolute$address() {
        return MagickDrawPathCurveToQuadraticBezierAbsolute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierAbsolute(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static void MagickDrawPathCurveToQuadraticBezierAbsolute(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickDrawPathCurveToQuadraticBezierAbsolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathCurveToQuadraticBezierAbsolute", x0, x1, x2, x3, x4);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathCurveToQuadraticBezierRelative {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathCurveToQuadraticBezierRelative");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierRelative(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathCurveToQuadraticBezierRelative$descriptor() {
        return MagickDrawPathCurveToQuadraticBezierRelative.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierRelative(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathCurveToQuadraticBezierRelative$handle() {
        return MagickDrawPathCurveToQuadraticBezierRelative.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierRelative(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathCurveToQuadraticBezierRelative$address() {
        return MagickDrawPathCurveToQuadraticBezierRelative.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierRelative(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static void MagickDrawPathCurveToQuadraticBezierRelative(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickDrawPathCurveToQuadraticBezierRelative.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathCurveToQuadraticBezierRelative", x0, x1, x2, x3, x4);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathCurveToQuadraticBezierSmoothAbsolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathCurveToQuadraticBezierSmoothAbsolute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierSmoothAbsolute(DrawingWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathCurveToQuadraticBezierSmoothAbsolute$descriptor() {
        return MagickDrawPathCurveToQuadraticBezierSmoothAbsolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierSmoothAbsolute(DrawingWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathCurveToQuadraticBezierSmoothAbsolute$handle() {
        return MagickDrawPathCurveToQuadraticBezierSmoothAbsolute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierSmoothAbsolute(DrawingWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathCurveToQuadraticBezierSmoothAbsolute$address() {
        return MagickDrawPathCurveToQuadraticBezierSmoothAbsolute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierSmoothAbsolute(DrawingWand *, const double, const double)
     * }
     */
    public static void MagickDrawPathCurveToQuadraticBezierSmoothAbsolute(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickDrawPathCurveToQuadraticBezierSmoothAbsolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathCurveToQuadraticBezierSmoothAbsolute", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathCurveToQuadraticBezierSmoothRelative {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathCurveToQuadraticBezierSmoothRelative");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierSmoothRelative(DrawingWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathCurveToQuadraticBezierSmoothRelative$descriptor() {
        return MagickDrawPathCurveToQuadraticBezierSmoothRelative.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierSmoothRelative(DrawingWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathCurveToQuadraticBezierSmoothRelative$handle() {
        return MagickDrawPathCurveToQuadraticBezierSmoothRelative.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierSmoothRelative(DrawingWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathCurveToQuadraticBezierSmoothRelative$address() {
        return MagickDrawPathCurveToQuadraticBezierSmoothRelative.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToQuadraticBezierSmoothRelative(DrawingWand *, const double, const double)
     * }
     */
    public static void MagickDrawPathCurveToQuadraticBezierSmoothRelative(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickDrawPathCurveToQuadraticBezierSmoothRelative.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathCurveToQuadraticBezierSmoothRelative", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathCurveToSmoothAbsolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathCurveToSmoothAbsolute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToSmoothAbsolute(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathCurveToSmoothAbsolute$descriptor() {
        return MagickDrawPathCurveToSmoothAbsolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToSmoothAbsolute(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathCurveToSmoothAbsolute$handle() {
        return MagickDrawPathCurveToSmoothAbsolute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToSmoothAbsolute(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathCurveToSmoothAbsolute$address() {
        return MagickDrawPathCurveToSmoothAbsolute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToSmoothAbsolute(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static void MagickDrawPathCurveToSmoothAbsolute(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickDrawPathCurveToSmoothAbsolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathCurveToSmoothAbsolute", x0, x1, x2, x3, x4);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathCurveToSmoothRelative {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathCurveToSmoothRelative");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToSmoothRelative(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathCurveToSmoothRelative$descriptor() {
        return MagickDrawPathCurveToSmoothRelative.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToSmoothRelative(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathCurveToSmoothRelative$handle() {
        return MagickDrawPathCurveToSmoothRelative.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToSmoothRelative(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathCurveToSmoothRelative$address() {
        return MagickDrawPathCurveToSmoothRelative.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathCurveToSmoothRelative(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static void MagickDrawPathCurveToSmoothRelative(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickDrawPathCurveToSmoothRelative.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathCurveToSmoothRelative", x0, x1, x2, x3, x4);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathEllipticArcAbsolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_INT,
            magick_wand.C_INT,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathEllipticArcAbsolute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathEllipticArcAbsolute(DrawingWand *, const double, const double, const double, unsigned int, unsigned int, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathEllipticArcAbsolute$descriptor() {
        return MagickDrawPathEllipticArcAbsolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathEllipticArcAbsolute(DrawingWand *, const double, const double, const double, unsigned int, unsigned int, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathEllipticArcAbsolute$handle() {
        return MagickDrawPathEllipticArcAbsolute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathEllipticArcAbsolute(DrawingWand *, const double, const double, const double, unsigned int, unsigned int, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathEllipticArcAbsolute$address() {
        return MagickDrawPathEllipticArcAbsolute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathEllipticArcAbsolute(DrawingWand *, const double, const double, const double, unsigned int, unsigned int, const double, const double)
     * }
     */
    public static void MagickDrawPathEllipticArcAbsolute(MemorySegment x0, double x1, double x2, double x3, int x4, int x5, double x6, double x7) {
        var mh$ = MagickDrawPathEllipticArcAbsolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathEllipticArcAbsolute", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathEllipticArcRelative {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_INT,
            magick_wand.C_INT,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathEllipticArcRelative");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathEllipticArcRelative(DrawingWand *, const double, const double, const double, unsigned int, unsigned int, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathEllipticArcRelative$descriptor() {
        return MagickDrawPathEllipticArcRelative.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathEllipticArcRelative(DrawingWand *, const double, const double, const double, unsigned int, unsigned int, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathEllipticArcRelative$handle() {
        return MagickDrawPathEllipticArcRelative.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathEllipticArcRelative(DrawingWand *, const double, const double, const double, unsigned int, unsigned int, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathEllipticArcRelative$address() {
        return MagickDrawPathEllipticArcRelative.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathEllipticArcRelative(DrawingWand *, const double, const double, const double, unsigned int, unsigned int, const double, const double)
     * }
     */
    public static void MagickDrawPathEllipticArcRelative(MemorySegment x0, double x1, double x2, double x3, int x4, int x5, double x6, double x7) {
        var mh$ = MagickDrawPathEllipticArcRelative.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathEllipticArcRelative", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathFinish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathFinish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathFinish(DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawPathFinish$descriptor() {
        return MagickDrawPathFinish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathFinish(DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawPathFinish$handle() {
        return MagickDrawPathFinish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathFinish(DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawPathFinish$address() {
        return MagickDrawPathFinish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathFinish(DrawingWand *)
     * }
     */
    public static void MagickDrawPathFinish(MemorySegment x0) {
        var mh$ = MagickDrawPathFinish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathFinish", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathLineToAbsolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathLineToAbsolute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToAbsolute(DrawingWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathLineToAbsolute$descriptor() {
        return MagickDrawPathLineToAbsolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToAbsolute(DrawingWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathLineToAbsolute$handle() {
        return MagickDrawPathLineToAbsolute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToAbsolute(DrawingWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathLineToAbsolute$address() {
        return MagickDrawPathLineToAbsolute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToAbsolute(DrawingWand *, const double, const double)
     * }
     */
    public static void MagickDrawPathLineToAbsolute(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickDrawPathLineToAbsolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathLineToAbsolute", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathLineToRelative {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathLineToRelative");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToRelative(DrawingWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathLineToRelative$descriptor() {
        return MagickDrawPathLineToRelative.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToRelative(DrawingWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathLineToRelative$handle() {
        return MagickDrawPathLineToRelative.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToRelative(DrawingWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathLineToRelative$address() {
        return MagickDrawPathLineToRelative.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToRelative(DrawingWand *, const double, const double)
     * }
     */
    public static void MagickDrawPathLineToRelative(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickDrawPathLineToRelative.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathLineToRelative", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathLineToHorizontalAbsolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathLineToHorizontalAbsolute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToHorizontalAbsolute(DrawingWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathLineToHorizontalAbsolute$descriptor() {
        return MagickDrawPathLineToHorizontalAbsolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToHorizontalAbsolute(DrawingWand *, const double)
     * }
     */
    public static MethodHandle MagickDrawPathLineToHorizontalAbsolute$handle() {
        return MagickDrawPathLineToHorizontalAbsolute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToHorizontalAbsolute(DrawingWand *, const double)
     * }
     */
    public static MemorySegment MagickDrawPathLineToHorizontalAbsolute$address() {
        return MagickDrawPathLineToHorizontalAbsolute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToHorizontalAbsolute(DrawingWand *, const double)
     * }
     */
    public static void MagickDrawPathLineToHorizontalAbsolute(MemorySegment x0, double x1) {
        var mh$ = MagickDrawPathLineToHorizontalAbsolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathLineToHorizontalAbsolute", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathLineToHorizontalRelative {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathLineToHorizontalRelative");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToHorizontalRelative(DrawingWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathLineToHorizontalRelative$descriptor() {
        return MagickDrawPathLineToHorizontalRelative.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToHorizontalRelative(DrawingWand *, const double)
     * }
     */
    public static MethodHandle MagickDrawPathLineToHorizontalRelative$handle() {
        return MagickDrawPathLineToHorizontalRelative.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToHorizontalRelative(DrawingWand *, const double)
     * }
     */
    public static MemorySegment MagickDrawPathLineToHorizontalRelative$address() {
        return MagickDrawPathLineToHorizontalRelative.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToHorizontalRelative(DrawingWand *, const double)
     * }
     */
    public static void MagickDrawPathLineToHorizontalRelative(MemorySegment x0, double x1) {
        var mh$ = MagickDrawPathLineToHorizontalRelative.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathLineToHorizontalRelative", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathLineToVerticalAbsolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathLineToVerticalAbsolute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToVerticalAbsolute(DrawingWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathLineToVerticalAbsolute$descriptor() {
        return MagickDrawPathLineToVerticalAbsolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToVerticalAbsolute(DrawingWand *, const double)
     * }
     */
    public static MethodHandle MagickDrawPathLineToVerticalAbsolute$handle() {
        return MagickDrawPathLineToVerticalAbsolute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToVerticalAbsolute(DrawingWand *, const double)
     * }
     */
    public static MemorySegment MagickDrawPathLineToVerticalAbsolute$address() {
        return MagickDrawPathLineToVerticalAbsolute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToVerticalAbsolute(DrawingWand *, const double)
     * }
     */
    public static void MagickDrawPathLineToVerticalAbsolute(MemorySegment x0, double x1) {
        var mh$ = MagickDrawPathLineToVerticalAbsolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathLineToVerticalAbsolute", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathLineToVerticalRelative {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathLineToVerticalRelative");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToVerticalRelative(DrawingWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathLineToVerticalRelative$descriptor() {
        return MagickDrawPathLineToVerticalRelative.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToVerticalRelative(DrawingWand *, const double)
     * }
     */
    public static MethodHandle MagickDrawPathLineToVerticalRelative$handle() {
        return MagickDrawPathLineToVerticalRelative.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToVerticalRelative(DrawingWand *, const double)
     * }
     */
    public static MemorySegment MagickDrawPathLineToVerticalRelative$address() {
        return MagickDrawPathLineToVerticalRelative.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathLineToVerticalRelative(DrawingWand *, const double)
     * }
     */
    public static void MagickDrawPathLineToVerticalRelative(MemorySegment x0, double x1) {
        var mh$ = MagickDrawPathLineToVerticalRelative.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathLineToVerticalRelative", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathMoveToAbsolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathMoveToAbsolute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathMoveToAbsolute(DrawingWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathMoveToAbsolute$descriptor() {
        return MagickDrawPathMoveToAbsolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathMoveToAbsolute(DrawingWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathMoveToAbsolute$handle() {
        return MagickDrawPathMoveToAbsolute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathMoveToAbsolute(DrawingWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathMoveToAbsolute$address() {
        return MagickDrawPathMoveToAbsolute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathMoveToAbsolute(DrawingWand *, const double, const double)
     * }
     */
    public static void MagickDrawPathMoveToAbsolute(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickDrawPathMoveToAbsolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathMoveToAbsolute", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathMoveToRelative {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathMoveToRelative");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathMoveToRelative(DrawingWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPathMoveToRelative$descriptor() {
        return MagickDrawPathMoveToRelative.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathMoveToRelative(DrawingWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPathMoveToRelative$handle() {
        return MagickDrawPathMoveToRelative.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathMoveToRelative(DrawingWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPathMoveToRelative$address() {
        return MagickDrawPathMoveToRelative.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathMoveToRelative(DrawingWand *, const double, const double)
     * }
     */
    public static void MagickDrawPathMoveToRelative(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickDrawPathMoveToRelative.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathMoveToRelative", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPathStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPathStart");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPathStart(DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawPathStart$descriptor() {
        return MagickDrawPathStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPathStart(DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawPathStart$handle() {
        return MagickDrawPathStart.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPathStart(DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawPathStart$address() {
        return MagickDrawPathStart.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPathStart(DrawingWand *)
     * }
     */
    public static void MagickDrawPathStart(MemorySegment x0) {
        var mh$ = MagickDrawPathStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPathStart", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPoint(DrawingWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPoint$descriptor() {
        return MagickDrawPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPoint(DrawingWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPoint$handle() {
        return MagickDrawPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPoint(DrawingWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPoint$address() {
        return MagickDrawPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPoint(DrawingWand *, const double, const double)
     * }
     */
    public static void MagickDrawPoint(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickDrawPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPoint", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPolygon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPolygon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPolygon(DrawingWand *, const unsigned long, const PointInfo *)
     * }
     */
    public static FunctionDescriptor MagickDrawPolygon$descriptor() {
        return MagickDrawPolygon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPolygon(DrawingWand *, const unsigned long, const PointInfo *)
     * }
     */
    public static MethodHandle MagickDrawPolygon$handle() {
        return MagickDrawPolygon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPolygon(DrawingWand *, const unsigned long, const PointInfo *)
     * }
     */
    public static MemorySegment MagickDrawPolygon$address() {
        return MagickDrawPolygon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPolygon(DrawingWand *, const unsigned long, const PointInfo *)
     * }
     */
    public static void MagickDrawPolygon(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickDrawPolygon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPolygon", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPolyline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPolyline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPolyline(DrawingWand *, const unsigned long, const PointInfo *)
     * }
     */
    public static FunctionDescriptor MagickDrawPolyline$descriptor() {
        return MagickDrawPolyline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPolyline(DrawingWand *, const unsigned long, const PointInfo *)
     * }
     */
    public static MethodHandle MagickDrawPolyline$handle() {
        return MagickDrawPolyline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPolyline(DrawingWand *, const unsigned long, const PointInfo *)
     * }
     */
    public static MemorySegment MagickDrawPolyline$address() {
        return MagickDrawPolyline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPolyline(DrawingWand *, const unsigned long, const PointInfo *)
     * }
     */
    public static void MagickDrawPolyline(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickDrawPolyline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPolyline", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPopClipPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPopClipPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPopClipPath(DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawPopClipPath$descriptor() {
        return MagickDrawPopClipPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPopClipPath(DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawPopClipPath$handle() {
        return MagickDrawPopClipPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPopClipPath(DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawPopClipPath$address() {
        return MagickDrawPopClipPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPopClipPath(DrawingWand *)
     * }
     */
    public static void MagickDrawPopClipPath(MemorySegment x0) {
        var mh$ = MagickDrawPopClipPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPopClipPath", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPopDefs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPopDefs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPopDefs(DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawPopDefs$descriptor() {
        return MagickDrawPopDefs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPopDefs(DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawPopDefs$handle() {
        return MagickDrawPopDefs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPopDefs(DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawPopDefs$address() {
        return MagickDrawPopDefs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPopDefs(DrawingWand *)
     * }
     */
    public static void MagickDrawPopDefs(MemorySegment x0) {
        var mh$ = MagickDrawPopDefs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPopDefs", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPopGraphicContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPopGraphicContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPopGraphicContext(DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawPopGraphicContext$descriptor() {
        return MagickDrawPopGraphicContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPopGraphicContext(DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawPopGraphicContext$handle() {
        return MagickDrawPopGraphicContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPopGraphicContext(DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawPopGraphicContext$address() {
        return MagickDrawPopGraphicContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPopGraphicContext(DrawingWand *)
     * }
     */
    public static void MagickDrawPopGraphicContext(MemorySegment x0) {
        var mh$ = MagickDrawPopGraphicContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPopGraphicContext", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPopPattern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPopPattern");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPopPattern(DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawPopPattern$descriptor() {
        return MagickDrawPopPattern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPopPattern(DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawPopPattern$handle() {
        return MagickDrawPopPattern.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPopPattern(DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawPopPattern$address() {
        return MagickDrawPopPattern.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPopPattern(DrawingWand *)
     * }
     */
    public static void MagickDrawPopPattern(MemorySegment x0) {
        var mh$ = MagickDrawPopPattern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPopPattern", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPushClipPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPushClipPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPushClipPath(DrawingWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDrawPushClipPath$descriptor() {
        return MagickDrawPushClipPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPushClipPath(DrawingWand *, const char *)
     * }
     */
    public static MethodHandle MagickDrawPushClipPath$handle() {
        return MagickDrawPushClipPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPushClipPath(DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickDrawPushClipPath$address() {
        return MagickDrawPushClipPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPushClipPath(DrawingWand *, const char *)
     * }
     */
    public static void MagickDrawPushClipPath(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawPushClipPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPushClipPath", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPushDefs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPushDefs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPushDefs(DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawPushDefs$descriptor() {
        return MagickDrawPushDefs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPushDefs(DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawPushDefs$handle() {
        return MagickDrawPushDefs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPushDefs(DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawPushDefs$address() {
        return MagickDrawPushDefs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPushDefs(DrawingWand *)
     * }
     */
    public static void MagickDrawPushDefs(MemorySegment x0) {
        var mh$ = MagickDrawPushDefs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPushDefs", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPushGraphicContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPushGraphicContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPushGraphicContext(DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawPushGraphicContext$descriptor() {
        return MagickDrawPushGraphicContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPushGraphicContext(DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawPushGraphicContext$handle() {
        return MagickDrawPushGraphicContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPushGraphicContext(DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawPushGraphicContext$address() {
        return MagickDrawPushGraphicContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPushGraphicContext(DrawingWand *)
     * }
     */
    public static void MagickDrawPushGraphicContext(MemorySegment x0) {
        var mh$ = MagickDrawPushGraphicContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPushGraphicContext", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawPushPattern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawPushPattern");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawPushPattern(DrawingWand *, const char *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawPushPattern$descriptor() {
        return MagickDrawPushPattern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawPushPattern(DrawingWand *, const char *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawPushPattern$handle() {
        return MagickDrawPushPattern.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawPushPattern(DrawingWand *, const char *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawPushPattern$address() {
        return MagickDrawPushPattern.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawPushPattern(DrawingWand *, const char *, const double, const double, const double, const double)
     * }
     */
    public static void MagickDrawPushPattern(MemorySegment x0, MemorySegment x1, double x2, double x3, double x4, double x5) {
        var mh$ = MagickDrawPushPattern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawPushPattern", x0, x1, x2, x3, x4, x5);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawRectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawRectangle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawRectangle(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawRectangle$descriptor() {
        return MagickDrawRectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawRectangle(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawRectangle$handle() {
        return MagickDrawRectangle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawRectangle(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawRectangle$address() {
        return MagickDrawRectangle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawRectangle(DrawingWand *, const double, const double, const double, const double)
     * }
     */
    public static void MagickDrawRectangle(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickDrawRectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawRectangle", x0, x1, x2, x3, x4);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawRotate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawRotate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawRotate(DrawingWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawRotate$descriptor() {
        return MagickDrawRotate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawRotate(DrawingWand *, const double)
     * }
     */
    public static MethodHandle MagickDrawRotate$handle() {
        return MagickDrawRotate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawRotate(DrawingWand *, const double)
     * }
     */
    public static MemorySegment MagickDrawRotate$address() {
        return MagickDrawRotate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawRotate(DrawingWand *, const double)
     * }
     */
    public static void MagickDrawRotate(MemorySegment x0, double x1) {
        var mh$ = MagickDrawRotate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawRotate", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawRoundRectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawRoundRectangle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawRoundRectangle(DrawingWand *, double, double, double, double, double, double)
     * }
     */
    public static FunctionDescriptor MagickDrawRoundRectangle$descriptor() {
        return MagickDrawRoundRectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawRoundRectangle(DrawingWand *, double, double, double, double, double, double)
     * }
     */
    public static MethodHandle MagickDrawRoundRectangle$handle() {
        return MagickDrawRoundRectangle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawRoundRectangle(DrawingWand *, double, double, double, double, double, double)
     * }
     */
    public static MemorySegment MagickDrawRoundRectangle$address() {
        return MagickDrawRoundRectangle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawRoundRectangle(DrawingWand *, double, double, double, double, double, double)
     * }
     */
    public static void MagickDrawRoundRectangle(MemorySegment x0, double x1, double x2, double x3, double x4, double x5, double x6) {
        var mh$ = MagickDrawRoundRectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawRoundRectangle", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawScale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawScale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawScale(DrawingWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawScale$descriptor() {
        return MagickDrawScale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawScale(DrawingWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawScale$handle() {
        return MagickDrawScale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawScale(DrawingWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawScale$address() {
        return MagickDrawScale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawScale(DrawingWand *, const double, const double)
     * }
     */
    public static void MagickDrawScale(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickDrawScale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawScale", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetClipPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetClipPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetClipPath(DrawingWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDrawSetClipPath$descriptor() {
        return MagickDrawSetClipPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetClipPath(DrawingWand *, const char *)
     * }
     */
    public static MethodHandle MagickDrawSetClipPath$handle() {
        return MagickDrawSetClipPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetClipPath(DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickDrawSetClipPath$address() {
        return MagickDrawSetClipPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetClipPath(DrawingWand *, const char *)
     * }
     */
    public static void MagickDrawSetClipPath(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawSetClipPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetClipPath", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetClipRule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetClipRule");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetClipRule(DrawingWand *, const FillRule)
     * }
     */
    public static FunctionDescriptor MagickDrawSetClipRule$descriptor() {
        return MagickDrawSetClipRule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetClipRule(DrawingWand *, const FillRule)
     * }
     */
    public static MethodHandle MagickDrawSetClipRule$handle() {
        return MagickDrawSetClipRule.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetClipRule(DrawingWand *, const FillRule)
     * }
     */
    public static MemorySegment MagickDrawSetClipRule$address() {
        return MagickDrawSetClipRule.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetClipRule(DrawingWand *, const FillRule)
     * }
     */
    public static void MagickDrawSetClipRule(MemorySegment x0, int x1) {
        var mh$ = MagickDrawSetClipRule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetClipRule", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetClipUnits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetClipUnits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetClipUnits(DrawingWand *, const ClipPathUnits)
     * }
     */
    public static FunctionDescriptor MagickDrawSetClipUnits$descriptor() {
        return MagickDrawSetClipUnits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetClipUnits(DrawingWand *, const ClipPathUnits)
     * }
     */
    public static MethodHandle MagickDrawSetClipUnits$handle() {
        return MagickDrawSetClipUnits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetClipUnits(DrawingWand *, const ClipPathUnits)
     * }
     */
    public static MemorySegment MagickDrawSetClipUnits$address() {
        return MagickDrawSetClipUnits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetClipUnits(DrawingWand *, const ClipPathUnits)
     * }
     */
    public static void MagickDrawSetClipUnits(MemorySegment x0, int x1) {
        var mh$ = MagickDrawSetClipUnits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetClipUnits", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetFillColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetFillColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFillColor(DrawingWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawSetFillColor$descriptor() {
        return MagickDrawSetFillColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFillColor(DrawingWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickDrawSetFillColor$handle() {
        return MagickDrawSetFillColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFillColor(DrawingWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickDrawSetFillColor$address() {
        return MagickDrawSetFillColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetFillColor(DrawingWand *, const PixelWand *)
     * }
     */
    public static void MagickDrawSetFillColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawSetFillColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetFillColor", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetFillOpacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetFillOpacity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFillOpacity(DrawingWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawSetFillOpacity$descriptor() {
        return MagickDrawSetFillOpacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFillOpacity(DrawingWand *, const double)
     * }
     */
    public static MethodHandle MagickDrawSetFillOpacity$handle() {
        return MagickDrawSetFillOpacity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFillOpacity(DrawingWand *, const double)
     * }
     */
    public static MemorySegment MagickDrawSetFillOpacity$address() {
        return MagickDrawSetFillOpacity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetFillOpacity(DrawingWand *, const double)
     * }
     */
    public static void MagickDrawSetFillOpacity(MemorySegment x0, double x1) {
        var mh$ = MagickDrawSetFillOpacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetFillOpacity", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetFillRule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetFillRule");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFillRule(DrawingWand *, const FillRule)
     * }
     */
    public static FunctionDescriptor MagickDrawSetFillRule$descriptor() {
        return MagickDrawSetFillRule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFillRule(DrawingWand *, const FillRule)
     * }
     */
    public static MethodHandle MagickDrawSetFillRule$handle() {
        return MagickDrawSetFillRule.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFillRule(DrawingWand *, const FillRule)
     * }
     */
    public static MemorySegment MagickDrawSetFillRule$address() {
        return MagickDrawSetFillRule.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetFillRule(DrawingWand *, const FillRule)
     * }
     */
    public static void MagickDrawSetFillRule(MemorySegment x0, int x1) {
        var mh$ = MagickDrawSetFillRule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetFillRule", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetFillPatternURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetFillPatternURL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFillPatternURL(DrawingWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDrawSetFillPatternURL$descriptor() {
        return MagickDrawSetFillPatternURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFillPatternURL(DrawingWand *, const char *)
     * }
     */
    public static MethodHandle MagickDrawSetFillPatternURL$handle() {
        return MagickDrawSetFillPatternURL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFillPatternURL(DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickDrawSetFillPatternURL$address() {
        return MagickDrawSetFillPatternURL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetFillPatternURL(DrawingWand *, const char *)
     * }
     */
    public static void MagickDrawSetFillPatternURL(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawSetFillPatternURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetFillPatternURL", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFont(DrawingWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDrawSetFont$descriptor() {
        return MagickDrawSetFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFont(DrawingWand *, const char *)
     * }
     */
    public static MethodHandle MagickDrawSetFont$handle() {
        return MagickDrawSetFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFont(DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickDrawSetFont$address() {
        return MagickDrawSetFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetFont(DrawingWand *, const char *)
     * }
     */
    public static void MagickDrawSetFont(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawSetFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetFont", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetFontFamily {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetFontFamily");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontFamily(DrawingWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDrawSetFontFamily$descriptor() {
        return MagickDrawSetFontFamily.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontFamily(DrawingWand *, const char *)
     * }
     */
    public static MethodHandle MagickDrawSetFontFamily$handle() {
        return MagickDrawSetFontFamily.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontFamily(DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickDrawSetFontFamily$address() {
        return MagickDrawSetFontFamily.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetFontFamily(DrawingWand *, const char *)
     * }
     */
    public static void MagickDrawSetFontFamily(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawSetFontFamily.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetFontFamily", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetFontSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetFontSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontSize(DrawingWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawSetFontSize$descriptor() {
        return MagickDrawSetFontSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontSize(DrawingWand *, const double)
     * }
     */
    public static MethodHandle MagickDrawSetFontSize$handle() {
        return MagickDrawSetFontSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontSize(DrawingWand *, const double)
     * }
     */
    public static MemorySegment MagickDrawSetFontSize$address() {
        return MagickDrawSetFontSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetFontSize(DrawingWand *, const double)
     * }
     */
    public static void MagickDrawSetFontSize(MemorySegment x0, double x1) {
        var mh$ = MagickDrawSetFontSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetFontSize", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetFontStretch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetFontStretch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontStretch(DrawingWand *, const StretchType)
     * }
     */
    public static FunctionDescriptor MagickDrawSetFontStretch$descriptor() {
        return MagickDrawSetFontStretch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontStretch(DrawingWand *, const StretchType)
     * }
     */
    public static MethodHandle MagickDrawSetFontStretch$handle() {
        return MagickDrawSetFontStretch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontStretch(DrawingWand *, const StretchType)
     * }
     */
    public static MemorySegment MagickDrawSetFontStretch$address() {
        return MagickDrawSetFontStretch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetFontStretch(DrawingWand *, const StretchType)
     * }
     */
    public static void MagickDrawSetFontStretch(MemorySegment x0, int x1) {
        var mh$ = MagickDrawSetFontStretch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetFontStretch", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetFontStyle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetFontStyle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontStyle(DrawingWand *, const StyleType)
     * }
     */
    public static FunctionDescriptor MagickDrawSetFontStyle$descriptor() {
        return MagickDrawSetFontStyle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontStyle(DrawingWand *, const StyleType)
     * }
     */
    public static MethodHandle MagickDrawSetFontStyle$handle() {
        return MagickDrawSetFontStyle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontStyle(DrawingWand *, const StyleType)
     * }
     */
    public static MemorySegment MagickDrawSetFontStyle$address() {
        return MagickDrawSetFontStyle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetFontStyle(DrawingWand *, const StyleType)
     * }
     */
    public static void MagickDrawSetFontStyle(MemorySegment x0, int x1) {
        var mh$ = MagickDrawSetFontStyle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetFontStyle", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetFontWeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetFontWeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontWeight(DrawingWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickDrawSetFontWeight$descriptor() {
        return MagickDrawSetFontWeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontWeight(DrawingWand *, const unsigned long)
     * }
     */
    public static MethodHandle MagickDrawSetFontWeight$handle() {
        return MagickDrawSetFontWeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetFontWeight(DrawingWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickDrawSetFontWeight$address() {
        return MagickDrawSetFontWeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetFontWeight(DrawingWand *, const unsigned long)
     * }
     */
    public static void MagickDrawSetFontWeight(MemorySegment x0, long x1) {
        var mh$ = MagickDrawSetFontWeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetFontWeight", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetGravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetGravity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetGravity(DrawingWand *, const GravityType)
     * }
     */
    public static FunctionDescriptor MagickDrawSetGravity$descriptor() {
        return MagickDrawSetGravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetGravity(DrawingWand *, const GravityType)
     * }
     */
    public static MethodHandle MagickDrawSetGravity$handle() {
        return MagickDrawSetGravity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetGravity(DrawingWand *, const GravityType)
     * }
     */
    public static MemorySegment MagickDrawSetGravity$address() {
        return MagickDrawSetGravity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetGravity(DrawingWand *, const GravityType)
     * }
     */
    public static void MagickDrawSetGravity(MemorySegment x0, int x1) {
        var mh$ = MagickDrawSetGravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetGravity", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSkewX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSkewX");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSkewX(DrawingWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawSkewX$descriptor() {
        return MagickDrawSkewX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSkewX(DrawingWand *, const double)
     * }
     */
    public static MethodHandle MagickDrawSkewX$handle() {
        return MagickDrawSkewX.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSkewX(DrawingWand *, const double)
     * }
     */
    public static MemorySegment MagickDrawSkewX$address() {
        return MagickDrawSkewX.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSkewX(DrawingWand *, const double)
     * }
     */
    public static void MagickDrawSkewX(MemorySegment x0, double x1) {
        var mh$ = MagickDrawSkewX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSkewX", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSkewY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSkewY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSkewY(DrawingWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawSkewY$descriptor() {
        return MagickDrawSkewY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSkewY(DrawingWand *, const double)
     * }
     */
    public static MethodHandle MagickDrawSkewY$handle() {
        return MagickDrawSkewY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSkewY(DrawingWand *, const double)
     * }
     */
    public static MemorySegment MagickDrawSkewY$address() {
        return MagickDrawSkewY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSkewY(DrawingWand *, const double)
     * }
     */
    public static void MagickDrawSkewY(MemorySegment x0, double x1) {
        var mh$ = MagickDrawSkewY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSkewY", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetStrokeAntialias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetStrokeAntialias");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeAntialias(DrawingWand *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickDrawSetStrokeAntialias$descriptor() {
        return MagickDrawSetStrokeAntialias.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeAntialias(DrawingWand *, const unsigned int)
     * }
     */
    public static MethodHandle MagickDrawSetStrokeAntialias$handle() {
        return MagickDrawSetStrokeAntialias.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeAntialias(DrawingWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickDrawSetStrokeAntialias$address() {
        return MagickDrawSetStrokeAntialias.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeAntialias(DrawingWand *, const unsigned int)
     * }
     */
    public static void MagickDrawSetStrokeAntialias(MemorySegment x0, int x1) {
        var mh$ = MagickDrawSetStrokeAntialias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetStrokeAntialias", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetStrokeColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetStrokeColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeColor(DrawingWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawSetStrokeColor$descriptor() {
        return MagickDrawSetStrokeColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeColor(DrawingWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickDrawSetStrokeColor$handle() {
        return MagickDrawSetStrokeColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeColor(DrawingWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickDrawSetStrokeColor$address() {
        return MagickDrawSetStrokeColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeColor(DrawingWand *, const PixelWand *)
     * }
     */
    public static void MagickDrawSetStrokeColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawSetStrokeColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetStrokeColor", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetStrokeDashArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetStrokeDashArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeDashArray(DrawingWand *, const unsigned long, const double *)
     * }
     */
    public static FunctionDescriptor MagickDrawSetStrokeDashArray$descriptor() {
        return MagickDrawSetStrokeDashArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeDashArray(DrawingWand *, const unsigned long, const double *)
     * }
     */
    public static MethodHandle MagickDrawSetStrokeDashArray$handle() {
        return MagickDrawSetStrokeDashArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeDashArray(DrawingWand *, const unsigned long, const double *)
     * }
     */
    public static MemorySegment MagickDrawSetStrokeDashArray$address() {
        return MagickDrawSetStrokeDashArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeDashArray(DrawingWand *, const unsigned long, const double *)
     * }
     */
    public static void MagickDrawSetStrokeDashArray(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickDrawSetStrokeDashArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetStrokeDashArray", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetStrokeDashOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetStrokeDashOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeDashOffset(DrawingWand *, const double dashoffset)
     * }
     */
    public static FunctionDescriptor MagickDrawSetStrokeDashOffset$descriptor() {
        return MagickDrawSetStrokeDashOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeDashOffset(DrawingWand *, const double dashoffset)
     * }
     */
    public static MethodHandle MagickDrawSetStrokeDashOffset$handle() {
        return MagickDrawSetStrokeDashOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeDashOffset(DrawingWand *, const double dashoffset)
     * }
     */
    public static MemorySegment MagickDrawSetStrokeDashOffset$address() {
        return MagickDrawSetStrokeDashOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeDashOffset(DrawingWand *, const double dashoffset)
     * }
     */
    public static void MagickDrawSetStrokeDashOffset(MemorySegment x0, double dashoffset) {
        var mh$ = MagickDrawSetStrokeDashOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetStrokeDashOffset", x0, dashoffset);
            }
            mh$.invokeExact(x0, dashoffset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetStrokeLineCap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetStrokeLineCap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeLineCap(DrawingWand *, const LineCap)
     * }
     */
    public static FunctionDescriptor MagickDrawSetStrokeLineCap$descriptor() {
        return MagickDrawSetStrokeLineCap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeLineCap(DrawingWand *, const LineCap)
     * }
     */
    public static MethodHandle MagickDrawSetStrokeLineCap$handle() {
        return MagickDrawSetStrokeLineCap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeLineCap(DrawingWand *, const LineCap)
     * }
     */
    public static MemorySegment MagickDrawSetStrokeLineCap$address() {
        return MagickDrawSetStrokeLineCap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeLineCap(DrawingWand *, const LineCap)
     * }
     */
    public static void MagickDrawSetStrokeLineCap(MemorySegment x0, int x1) {
        var mh$ = MagickDrawSetStrokeLineCap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetStrokeLineCap", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetStrokeLineJoin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetStrokeLineJoin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeLineJoin(DrawingWand *, const LineJoin)
     * }
     */
    public static FunctionDescriptor MagickDrawSetStrokeLineJoin$descriptor() {
        return MagickDrawSetStrokeLineJoin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeLineJoin(DrawingWand *, const LineJoin)
     * }
     */
    public static MethodHandle MagickDrawSetStrokeLineJoin$handle() {
        return MagickDrawSetStrokeLineJoin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeLineJoin(DrawingWand *, const LineJoin)
     * }
     */
    public static MemorySegment MagickDrawSetStrokeLineJoin$address() {
        return MagickDrawSetStrokeLineJoin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeLineJoin(DrawingWand *, const LineJoin)
     * }
     */
    public static void MagickDrawSetStrokeLineJoin(MemorySegment x0, int x1) {
        var mh$ = MagickDrawSetStrokeLineJoin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetStrokeLineJoin", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetStrokeMiterLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetStrokeMiterLimit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeMiterLimit(DrawingWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickDrawSetStrokeMiterLimit$descriptor() {
        return MagickDrawSetStrokeMiterLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeMiterLimit(DrawingWand *, const unsigned long)
     * }
     */
    public static MethodHandle MagickDrawSetStrokeMiterLimit$handle() {
        return MagickDrawSetStrokeMiterLimit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeMiterLimit(DrawingWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickDrawSetStrokeMiterLimit$address() {
        return MagickDrawSetStrokeMiterLimit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeMiterLimit(DrawingWand *, const unsigned long)
     * }
     */
    public static void MagickDrawSetStrokeMiterLimit(MemorySegment x0, long x1) {
        var mh$ = MagickDrawSetStrokeMiterLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetStrokeMiterLimit", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetStrokeOpacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetStrokeOpacity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeOpacity(DrawingWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawSetStrokeOpacity$descriptor() {
        return MagickDrawSetStrokeOpacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeOpacity(DrawingWand *, const double)
     * }
     */
    public static MethodHandle MagickDrawSetStrokeOpacity$handle() {
        return MagickDrawSetStrokeOpacity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeOpacity(DrawingWand *, const double)
     * }
     */
    public static MemorySegment MagickDrawSetStrokeOpacity$address() {
        return MagickDrawSetStrokeOpacity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeOpacity(DrawingWand *, const double)
     * }
     */
    public static void MagickDrawSetStrokeOpacity(MemorySegment x0, double x1) {
        var mh$ = MagickDrawSetStrokeOpacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetStrokeOpacity", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetStrokePatternURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetStrokePatternURL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokePatternURL(DrawingWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDrawSetStrokePatternURL$descriptor() {
        return MagickDrawSetStrokePatternURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokePatternURL(DrawingWand *, const char *)
     * }
     */
    public static MethodHandle MagickDrawSetStrokePatternURL$handle() {
        return MagickDrawSetStrokePatternURL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokePatternURL(DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickDrawSetStrokePatternURL$address() {
        return MagickDrawSetStrokePatternURL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokePatternURL(DrawingWand *, const char *)
     * }
     */
    public static void MagickDrawSetStrokePatternURL(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawSetStrokePatternURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetStrokePatternURL", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetStrokeWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetStrokeWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeWidth(DrawingWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawSetStrokeWidth$descriptor() {
        return MagickDrawSetStrokeWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeWidth(DrawingWand *, const double)
     * }
     */
    public static MethodHandle MagickDrawSetStrokeWidth$handle() {
        return MagickDrawSetStrokeWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeWidth(DrawingWand *, const double)
     * }
     */
    public static MemorySegment MagickDrawSetStrokeWidth$address() {
        return MagickDrawSetStrokeWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetStrokeWidth(DrawingWand *, const double)
     * }
     */
    public static void MagickDrawSetStrokeWidth(MemorySegment x0, double x1) {
        var mh$ = MagickDrawSetStrokeWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetStrokeWidth", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetTextAntialias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetTextAntialias");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetTextAntialias(DrawingWand *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickDrawSetTextAntialias$descriptor() {
        return MagickDrawSetTextAntialias.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetTextAntialias(DrawingWand *, const unsigned int)
     * }
     */
    public static MethodHandle MagickDrawSetTextAntialias$handle() {
        return MagickDrawSetTextAntialias.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetTextAntialias(DrawingWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickDrawSetTextAntialias$address() {
        return MagickDrawSetTextAntialias.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetTextAntialias(DrawingWand *, const unsigned int)
     * }
     */
    public static void MagickDrawSetTextAntialias(MemorySegment x0, int x1) {
        var mh$ = MagickDrawSetTextAntialias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetTextAntialias", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetTextDecoration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetTextDecoration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetTextDecoration(DrawingWand *, const DecorationType)
     * }
     */
    public static FunctionDescriptor MagickDrawSetTextDecoration$descriptor() {
        return MagickDrawSetTextDecoration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetTextDecoration(DrawingWand *, const DecorationType)
     * }
     */
    public static MethodHandle MagickDrawSetTextDecoration$handle() {
        return MagickDrawSetTextDecoration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetTextDecoration(DrawingWand *, const DecorationType)
     * }
     */
    public static MemorySegment MagickDrawSetTextDecoration$address() {
        return MagickDrawSetTextDecoration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetTextDecoration(DrawingWand *, const DecorationType)
     * }
     */
    public static void MagickDrawSetTextDecoration(MemorySegment x0, int x1) {
        var mh$ = MagickDrawSetTextDecoration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetTextDecoration", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetTextEncoding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetTextEncoding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetTextEncoding(DrawingWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDrawSetTextEncoding$descriptor() {
        return MagickDrawSetTextEncoding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetTextEncoding(DrawingWand *, const char *)
     * }
     */
    public static MethodHandle MagickDrawSetTextEncoding$handle() {
        return MagickDrawSetTextEncoding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetTextEncoding(DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickDrawSetTextEncoding$address() {
        return MagickDrawSetTextEncoding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetTextEncoding(DrawingWand *, const char *)
     * }
     */
    public static void MagickDrawSetTextEncoding(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawSetTextEncoding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetTextEncoding", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetTextUnderColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetTextUnderColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetTextUnderColor(DrawingWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawSetTextUnderColor$descriptor() {
        return MagickDrawSetTextUnderColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetTextUnderColor(DrawingWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickDrawSetTextUnderColor$handle() {
        return MagickDrawSetTextUnderColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetTextUnderColor(DrawingWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickDrawSetTextUnderColor$address() {
        return MagickDrawSetTextUnderColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetTextUnderColor(DrawingWand *, const PixelWand *)
     * }
     */
    public static void MagickDrawSetTextUnderColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawSetTextUnderColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetTextUnderColor", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawSetViewbox {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawSetViewbox");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawSetViewbox(DrawingWand *, unsigned long, unsigned long, unsigned long, unsigned long)
     * }
     */
    public static FunctionDescriptor MagickDrawSetViewbox$descriptor() {
        return MagickDrawSetViewbox.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawSetViewbox(DrawingWand *, unsigned long, unsigned long, unsigned long, unsigned long)
     * }
     */
    public static MethodHandle MagickDrawSetViewbox$handle() {
        return MagickDrawSetViewbox.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawSetViewbox(DrawingWand *, unsigned long, unsigned long, unsigned long, unsigned long)
     * }
     */
    public static MemorySegment MagickDrawSetViewbox$address() {
        return MagickDrawSetViewbox.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawSetViewbox(DrawingWand *, unsigned long, unsigned long, unsigned long, unsigned long)
     * }
     */
    public static void MagickDrawSetViewbox(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickDrawSetViewbox.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawSetViewbox", x0, x1, x2, x3, x4);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawTranslate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawTranslate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickDrawTranslate(DrawingWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickDrawTranslate$descriptor() {
        return MagickDrawTranslate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickDrawTranslate(DrawingWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickDrawTranslate$handle() {
        return MagickDrawTranslate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickDrawTranslate(DrawingWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickDrawTranslate$address() {
        return MagickDrawTranslate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickDrawTranslate(DrawingWand *, const double, const double)
     * }
     */
    public static void MagickDrawTranslate(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickDrawTranslate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawTranslate", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int FormatMagickString(char *, const size_t, const char *, ...)
     * }
     */
    public static class FormatMagickString {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                magick_wand.C_INT,
                magick_wand.C_POINTER,
                magick_wand.C_LONG,
                magick_wand.C_POINTER
            );
        private static final MemorySegment ADDR = magick_wand.findOrThrow("FormatMagickString");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private FormatMagickString(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int FormatMagickString(char *, const size_t, const char *, ...)
         * }
         */
        public static FormatMagickString makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new FormatMagickString(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, long x1, MemorySegment x2, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("FormatMagickString", x0, x1, x2, x3);
                }
                return (int) spreader.invokeExact(x0, x1, x2, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class CopyMagickString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("CopyMagickString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t CopyMagickString(char *, const char *, const size_t)
     * }
     */
    public static FunctionDescriptor CopyMagickString$descriptor() {
        return CopyMagickString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t CopyMagickString(char *, const char *, const size_t)
     * }
     */
    public static MethodHandle CopyMagickString$handle() {
        return CopyMagickString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t CopyMagickString(char *, const char *, const size_t)
     * }
     */
    public static MemorySegment CopyMagickString$address() {
        return CopyMagickString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t CopyMagickString(char *, const char *, const size_t)
     * }
     */
    public static long CopyMagickString(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = CopyMagickString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CopyMagickString", x0, x1, x2);
            }
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDescribeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDescribeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickDescribeImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickDescribeImage$descriptor() {
        return MagickDescribeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickDescribeImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickDescribeImage$handle() {
        return MagickDescribeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickDescribeImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickDescribeImage$address() {
        return MagickDescribeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickDescribeImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickDescribeImage(MemorySegment x0) {
        var mh$ = MagickDescribeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDescribeImage", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetConfigureInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetConfigureInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetConfigureInfo(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickGetConfigureInfo$descriptor() {
        return MagickGetConfigureInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetConfigureInfo(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickGetConfigureInfo$handle() {
        return MagickGetConfigureInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetConfigureInfo(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickGetConfigureInfo$address() {
        return MagickGetConfigureInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetConfigureInfo(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickGetConfigureInfo(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetConfigureInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetConfigureInfo", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetException {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetException");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetException(const MagickWand *, ExceptionType *)
     * }
     */
    public static FunctionDescriptor MagickGetException$descriptor() {
        return MagickGetException.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetException(const MagickWand *, ExceptionType *)
     * }
     */
    public static MethodHandle MagickGetException$handle() {
        return MagickGetException.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetException(const MagickWand *, ExceptionType *)
     * }
     */
    public static MemorySegment MagickGetException$address() {
        return MagickGetException.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetException(const MagickWand *, ExceptionType *)
     * }
     */
    public static MemorySegment MagickGetException(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetException.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetException", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetFilename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetFilename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetFilename(const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetFilename$descriptor() {
        return MagickGetFilename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetFilename(const MagickWand *)
     * }
     */
    public static MethodHandle MagickGetFilename$handle() {
        return MagickGetFilename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetFilename(const MagickWand *)
     * }
     */
    public static MemorySegment MagickGetFilename$address() {
        return MagickGetFilename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetFilename(const MagickWand *)
     * }
     */
    public static MemorySegment MagickGetFilename(MemorySegment x0) {
        var mh$ = MagickGetFilename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetFilename", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetImageAttribute(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickGetImageAttribute$descriptor() {
        return MagickGetImageAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetImageAttribute(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickGetImageAttribute$handle() {
        return MagickGetImageAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetImageAttribute(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickGetImageAttribute$address() {
        return MagickGetImageAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetImageAttribute(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickGetImageAttribute(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageAttribute", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageFilename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageFilename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetImageFilename(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageFilename$descriptor() {
        return MagickGetImageFilename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetImageFilename(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageFilename$handle() {
        return MagickGetImageFilename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetImageFilename(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageFilename$address() {
        return MagickGetImageFilename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetImageFilename(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageFilename(MemorySegment x0) {
        var mh$ = MagickGetImageFilename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageFilename", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetImageFormat(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageFormat$descriptor() {
        return MagickGetImageFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetImageFormat(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageFormat$handle() {
        return MagickGetImageFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetImageFormat(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageFormat$address() {
        return MagickGetImageFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetImageFormat(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageFormat(MemorySegment x0) {
        var mh$ = MagickGetImageFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageFormat", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageSignature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageSignature");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetImageSignature(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageSignature$descriptor() {
        return MagickGetImageSignature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetImageSignature(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageSignature$handle() {
        return MagickGetImageSignature.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetImageSignature(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageSignature$address() {
        return MagickGetImageSignature.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetImageSignature(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageSignature(MemorySegment x0) {
        var mh$ = MagickGetImageSignature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageSignature", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQueryFonts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickQueryFonts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **MagickQueryFonts(const char *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickQueryFonts$descriptor() {
        return MagickQueryFonts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **MagickQueryFonts(const char *, unsigned long *)
     * }
     */
    public static MethodHandle MagickQueryFonts$handle() {
        return MagickQueryFonts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **MagickQueryFonts(const char *, unsigned long *)
     * }
     */
    public static MemorySegment MagickQueryFonts$address() {
        return MagickQueryFonts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **MagickQueryFonts(const char *, unsigned long *)
     * }
     */
    public static MemorySegment MagickQueryFonts(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickQueryFonts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQueryFonts", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQueryFormats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickQueryFormats");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **MagickQueryFormats(const char *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickQueryFormats$descriptor() {
        return MagickQueryFormats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **MagickQueryFormats(const char *, unsigned long *)
     * }
     */
    public static MethodHandle MagickQueryFormats$handle() {
        return MagickQueryFormats.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **MagickQueryFormats(const char *, unsigned long *)
     * }
     */
    public static MemorySegment MagickQueryFormats$address() {
        return MagickQueryFormats.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **MagickQueryFormats(const char *, unsigned long *)
     * }
     */
    public static MemorySegment MagickQueryFormats(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickQueryFormats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQueryFormats", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageCompose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageCompose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CompositeOperator MagickGetImageCompose(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageCompose$descriptor() {
        return MagickGetImageCompose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CompositeOperator MagickGetImageCompose(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageCompose$handle() {
        return MagickGetImageCompose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CompositeOperator MagickGetImageCompose(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageCompose$address() {
        return MagickGetImageCompose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CompositeOperator MagickGetImageCompose(MagickWand *)
     * }
     */
    public static int MagickGetImageCompose(MemorySegment x0) {
        var mh$ = MagickGetImageCompose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageCompose", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageColorspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageColorspace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ColorspaceType MagickGetImageColorspace(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageColorspace$descriptor() {
        return MagickGetImageColorspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ColorspaceType MagickGetImageColorspace(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageColorspace$handle() {
        return MagickGetImageColorspace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ColorspaceType MagickGetImageColorspace(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageColorspace$address() {
        return MagickGetImageColorspace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ColorspaceType MagickGetImageColorspace(MagickWand *)
     * }
     */
    public static int MagickGetImageColorspace(MemorySegment x0) {
        var mh$ = MagickGetImageColorspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageColorspace", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageCompression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageCompression");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CompressionType MagickGetImageCompression(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageCompression$descriptor() {
        return MagickGetImageCompression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CompressionType MagickGetImageCompression(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageCompression$handle() {
        return MagickGetImageCompression.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CompressionType MagickGetImageCompression(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageCompression$address() {
        return MagickGetImageCompression.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CompressionType MagickGetImageCompression(MagickWand *)
     * }
     */
    public static int MagickGetImageCompression(MemorySegment x0) {
        var mh$ = MagickGetImageCompression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageCompression", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetCopyright {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER    );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetCopyright");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetCopyright()
     * }
     */
    public static FunctionDescriptor MagickGetCopyright$descriptor() {
        return MagickGetCopyright.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetCopyright()
     * }
     */
    public static MethodHandle MagickGetCopyright$handle() {
        return MagickGetCopyright.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetCopyright()
     * }
     */
    public static MemorySegment MagickGetCopyright$address() {
        return MagickGetCopyright.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetCopyright()
     * }
     */
    public static MemorySegment MagickGetCopyright() {
        var mh$ = MagickGetCopyright.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetCopyright");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetHomeURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER    );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetHomeURL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetHomeURL()
     * }
     */
    public static FunctionDescriptor MagickGetHomeURL$descriptor() {
        return MagickGetHomeURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetHomeURL()
     * }
     */
    public static MethodHandle MagickGetHomeURL$handle() {
        return MagickGetHomeURL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetHomeURL()
     * }
     */
    public static MemorySegment MagickGetHomeURL$address() {
        return MagickGetHomeURL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetHomeURL()
     * }
     */
    public static MemorySegment MagickGetHomeURL() {
        var mh$ = MagickGetHomeURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetHomeURL");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageGeometry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetImageGeometry(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageGeometry$descriptor() {
        return MagickGetImageGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetImageGeometry(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageGeometry$handle() {
        return MagickGetImageGeometry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetImageGeometry(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageGeometry$address() {
        return MagickGetImageGeometry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetImageGeometry(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageGeometry(MemorySegment x0) {
        var mh$ = MagickGetImageGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageGeometry", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetPackageName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER    );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetPackageName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetPackageName()
     * }
     */
    public static FunctionDescriptor MagickGetPackageName$descriptor() {
        return MagickGetPackageName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetPackageName()
     * }
     */
    public static MethodHandle MagickGetPackageName$handle() {
        return MagickGetPackageName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetPackageName()
     * }
     */
    public static MemorySegment MagickGetPackageName$address() {
        return MagickGetPackageName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetPackageName()
     * }
     */
    public static MemorySegment MagickGetPackageName() {
        var mh$ = MagickGetPackageName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetPackageName");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetQuantumDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetQuantumDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetQuantumDepth(unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetQuantumDepth$descriptor() {
        return MagickGetQuantumDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetQuantumDepth(unsigned long *)
     * }
     */
    public static MethodHandle MagickGetQuantumDepth$handle() {
        return MagickGetQuantumDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetQuantumDepth(unsigned long *)
     * }
     */
    public static MemorySegment MagickGetQuantumDepth$address() {
        return MagickGetQuantumDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetQuantumDepth(unsigned long *)
     * }
     */
    public static MemorySegment MagickGetQuantumDepth(MemorySegment x0) {
        var mh$ = MagickGetQuantumDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetQuantumDepth", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetReleaseDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER    );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetReleaseDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetReleaseDate()
     * }
     */
    public static FunctionDescriptor MagickGetReleaseDate$descriptor() {
        return MagickGetReleaseDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetReleaseDate()
     * }
     */
    public static MethodHandle MagickGetReleaseDate$handle() {
        return MagickGetReleaseDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetReleaseDate()
     * }
     */
    public static MemorySegment MagickGetReleaseDate$address() {
        return MagickGetReleaseDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetReleaseDate()
     * }
     */
    public static MemorySegment MagickGetReleaseDate() {
        var mh$ = MagickGetReleaseDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetReleaseDate");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetVersion(unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetVersion$descriptor() {
        return MagickGetVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetVersion(unsigned long *)
     * }
     */
    public static MethodHandle MagickGetVersion$handle() {
        return MagickGetVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetVersion(unsigned long *)
     * }
     */
    public static MemorySegment MagickGetVersion$address() {
        return MagickGetVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetVersion(unsigned long *)
     * }
     */
    public static MemorySegment MagickGetVersion(MemorySegment x0) {
        var mh$ = MagickGetVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetVersion", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageDispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageDispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DisposeType MagickGetImageDispose(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageDispose$descriptor() {
        return MagickGetImageDispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DisposeType MagickGetImageDispose(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageDispose$handle() {
        return MagickGetImageDispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DisposeType MagickGetImageDispose(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageDispose$address() {
        return MagickGetImageDispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DisposeType MagickGetImageDispose(MagickWand *)
     * }
     */
    public static int MagickGetImageDispose(MemorySegment x0) {
        var mh$ = MagickGetImageDispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageDispose", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageGamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageGamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double MagickGetImageGamma(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageGamma$descriptor() {
        return MagickGetImageGamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double MagickGetImageGamma(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageGamma$handle() {
        return MagickGetImageGamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double MagickGetImageGamma(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageGamma$address() {
        return MagickGetImageGamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double MagickGetImageGamma(MagickWand *)
     * }
     */
    public static double MagickGetImageGamma(MemorySegment x0) {
        var mh$ = MagickGetImageGamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageGamma", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageFuzz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageFuzz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double MagickGetImageFuzz(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageFuzz$descriptor() {
        return MagickGetImageFuzz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double MagickGetImageFuzz(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageFuzz$handle() {
        return MagickGetImageFuzz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double MagickGetImageFuzz(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageFuzz$address() {
        return MagickGetImageFuzz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double MagickGetImageFuzz(MagickWand *)
     * }
     */
    public static double MagickGetImageFuzz(MemorySegment x0) {
        var mh$ = MagickGetImageFuzz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageFuzz", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetSamplingFactors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetSamplingFactors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double *MagickGetSamplingFactors(MagickWand *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetSamplingFactors$descriptor() {
        return MagickGetSamplingFactors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double *MagickGetSamplingFactors(MagickWand *, unsigned long *)
     * }
     */
    public static MethodHandle MagickGetSamplingFactors$handle() {
        return MagickGetSamplingFactors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double *MagickGetSamplingFactors(MagickWand *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetSamplingFactors$address() {
        return MagickGetSamplingFactors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double *MagickGetSamplingFactors(MagickWand *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetSamplingFactors(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetSamplingFactors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetSamplingFactors", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQueryFontMetrics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickQueryFontMetrics");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double *MagickQueryFontMetrics(MagickWand *, const DrawingWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickQueryFontMetrics$descriptor() {
        return MagickQueryFontMetrics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double *MagickQueryFontMetrics(MagickWand *, const DrawingWand *, const char *)
     * }
     */
    public static MethodHandle MagickQueryFontMetrics$handle() {
        return MagickQueryFontMetrics.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double *MagickQueryFontMetrics(MagickWand *, const DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickQueryFontMetrics$address() {
        return MagickQueryFontMetrics.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double *MagickQueryFontMetrics(MagickWand *, const DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickQueryFontMetrics(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickQueryFontMetrics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQueryFontMetrics", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageGravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageGravity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GravityType MagickGetImageGravity(MagickWand *wand)
     * }
     */
    public static FunctionDescriptor MagickGetImageGravity$descriptor() {
        return MagickGetImageGravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GravityType MagickGetImageGravity(MagickWand *wand)
     * }
     */
    public static MethodHandle MagickGetImageGravity$handle() {
        return MagickGetImageGravity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GravityType MagickGetImageGravity(MagickWand *wand)
     * }
     */
    public static MemorySegment MagickGetImageGravity$address() {
        return MagickGetImageGravity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GravityType MagickGetImageGravity(MagickWand *wand)
     * }
     */
    public static int MagickGetImageGravity(MemorySegment wand) {
        var mh$ = MagickGetImageGravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageGravity", wand);
            }
            return (int)mh$.invokeExact(wand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageType(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageType$descriptor() {
        return MagickGetImageType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageType(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageType$handle() {
        return MagickGetImageType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageType(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageType$address() {
        return MagickGetImageType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImageType MagickGetImageType(MagickWand *)
     * }
     */
    public static int MagickGetImageType(MemorySegment x0) {
        var mh$ = MagickGetImageType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageType", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageSavedType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageSavedType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageSavedType(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageSavedType$descriptor() {
        return MagickGetImageSavedType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageSavedType(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageSavedType$handle() {
        return MagickGetImageSavedType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageSavedType(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageSavedType$address() {
        return MagickGetImageSavedType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImageType MagickGetImageSavedType(MagickWand *)
     * }
     */
    public static int MagickGetImageSavedType(MemorySegment x0) {
        var mh$ = MagickGetImageSavedType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageSavedType", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageInterlaceScheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageInterlaceScheme");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern InterlaceType MagickGetImageInterlaceScheme(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageInterlaceScheme$descriptor() {
        return MagickGetImageInterlaceScheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern InterlaceType MagickGetImageInterlaceScheme(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageInterlaceScheme$handle() {
        return MagickGetImageInterlaceScheme.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern InterlaceType MagickGetImageInterlaceScheme(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageInterlaceScheme$address() {
        return MagickGetImageInterlaceScheme.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern InterlaceType MagickGetImageInterlaceScheme(MagickWand *)
     * }
     */
    public static int MagickGetImageInterlaceScheme(MemorySegment x0) {
        var mh$ = MagickGetImageInterlaceScheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageInterlaceScheme", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long MagickGetImageIndex(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageIndex$descriptor() {
        return MagickGetImageIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long MagickGetImageIndex(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageIndex$handle() {
        return MagickGetImageIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long MagickGetImageIndex(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageIndex$address() {
        return MagickGetImageIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long MagickGetImageIndex(MagickWand *)
     * }
     */
    public static long MagickGetImageIndex(MemorySegment x0) {
        var mh$ = MagickGetImageIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageIndex", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern magick_int64_t MagickGetImageSize(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageSize$descriptor() {
        return MagickGetImageSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern magick_int64_t MagickGetImageSize(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageSize$handle() {
        return MagickGetImageSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern magick_int64_t MagickGetImageSize(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageSize$address() {
        return MagickGetImageSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern magick_int64_t MagickGetImageSize(MagickWand *)
     * }
     */
    public static long MagickGetImageSize(MemorySegment x0) {
        var mh$ = MagickGetImageSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageSize", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CloneMagickWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("CloneMagickWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *CloneMagickWand(const MagickWand *)
     * }
     */
    public static FunctionDescriptor CloneMagickWand$descriptor() {
        return CloneMagickWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *CloneMagickWand(const MagickWand *)
     * }
     */
    public static MethodHandle CloneMagickWand$handle() {
        return CloneMagickWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *CloneMagickWand(const MagickWand *)
     * }
     */
    public static MemorySegment CloneMagickWand$address() {
        return CloneMagickWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *CloneMagickWand(const MagickWand *)
     * }
     */
    public static MemorySegment CloneMagickWand(MemorySegment x0) {
        var mh$ = CloneMagickWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CloneMagickWand", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAppendImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickAppendImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAppendImages(MagickWand *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickAppendImages$descriptor() {
        return MagickAppendImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAppendImages(MagickWand *, const unsigned int)
     * }
     */
    public static MethodHandle MagickAppendImages$handle() {
        return MagickAppendImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAppendImages(MagickWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickAppendImages$address() {
        return MagickAppendImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickAppendImages(MagickWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickAppendImages(MemorySegment x0, int x1) {
        var mh$ = MagickAppendImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAppendImages", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAverageImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickAverageImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAverageImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickAverageImages$descriptor() {
        return MagickAverageImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAverageImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickAverageImages$handle() {
        return MagickAverageImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAverageImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickAverageImages$address() {
        return MagickAverageImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickAverageImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickAverageImages(MemorySegment x0) {
        var mh$ = MagickAverageImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAverageImages", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCoalesceImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickCoalesceImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCoalesceImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickCoalesceImages$descriptor() {
        return MagickCoalesceImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCoalesceImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickCoalesceImages$handle() {
        return MagickCoalesceImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCoalesceImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickCoalesceImages$address() {
        return MagickCoalesceImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickCoalesceImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickCoalesceImages(MemorySegment x0) {
        var mh$ = MagickCoalesceImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCoalesceImages", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCompareImageChannels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickCompareImageChannels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImageChannels(MagickWand *, const MagickWand *, const ChannelType, const MetricType, double *)
     * }
     */
    public static FunctionDescriptor MagickCompareImageChannels$descriptor() {
        return MagickCompareImageChannels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImageChannels(MagickWand *, const MagickWand *, const ChannelType, const MetricType, double *)
     * }
     */
    public static MethodHandle MagickCompareImageChannels$handle() {
        return MagickCompareImageChannels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImageChannels(MagickWand *, const MagickWand *, const ChannelType, const MetricType, double *)
     * }
     */
    public static MemorySegment MagickCompareImageChannels$address() {
        return MagickCompareImageChannels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImageChannels(MagickWand *, const MagickWand *, const ChannelType, const MetricType, double *)
     * }
     */
    public static MemorySegment MagickCompareImageChannels(MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4) {
        var mh$ = MagickCompareImageChannels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCompareImageChannels", x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCompareImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickCompareImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImages(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static FunctionDescriptor MagickCompareImages$descriptor() {
        return MagickCompareImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImages(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static MethodHandle MagickCompareImages$handle() {
        return MagickCompareImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImages(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static MemorySegment MagickCompareImages$address() {
        return MagickCompareImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImages(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static MemorySegment MagickCompareImages(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = MagickCompareImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCompareImages", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDeconstructImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDeconstructImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickDeconstructImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickDeconstructImages$descriptor() {
        return MagickDeconstructImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickDeconstructImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickDeconstructImages$handle() {
        return MagickDeconstructImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickDeconstructImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickDeconstructImages$address() {
        return MagickDeconstructImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickDeconstructImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickDeconstructImages(MemorySegment x0) {
        var mh$ = MagickDeconstructImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDeconstructImages", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFlattenImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickFlattenImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFlattenImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickFlattenImages$descriptor() {
        return MagickFlattenImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFlattenImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickFlattenImages$handle() {
        return MagickFlattenImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFlattenImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickFlattenImages$address() {
        return MagickFlattenImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickFlattenImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickFlattenImages(MemorySegment x0) {
        var mh$ = MagickFlattenImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFlattenImages", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFxImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickFxImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickFxImage$descriptor() {
        return MagickFxImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickFxImage$handle() {
        return MagickFxImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickFxImage$address() {
        return MagickFxImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickFxImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickFxImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFxImage", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFxImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickFxImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImageChannel(MagickWand *, const ChannelType, const char *)
     * }
     */
    public static FunctionDescriptor MagickFxImageChannel$descriptor() {
        return MagickFxImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImageChannel(MagickWand *, const ChannelType, const char *)
     * }
     */
    public static MethodHandle MagickFxImageChannel$handle() {
        return MagickFxImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImageChannel(MagickWand *, const ChannelType, const char *)
     * }
     */
    public static MemorySegment MagickFxImageChannel$address() {
        return MagickFxImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImageChannel(MagickWand *, const ChannelType, const char *)
     * }
     */
    public static MemorySegment MagickFxImageChannel(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = MagickFxImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFxImageChannel", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImage$descriptor() {
        return MagickGetImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImage$handle() {
        return MagickGetImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImage$address() {
        return MagickGetImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImage(MemorySegment x0) {
        var mh$ = MagickGetImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImage", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMorphImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickMorphImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMorphImages(MagickWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickMorphImages$descriptor() {
        return MagickMorphImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMorphImages(MagickWand *, const unsigned long)
     * }
     */
    public static MethodHandle MagickMorphImages$handle() {
        return MagickMorphImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMorphImages(MagickWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickMorphImages$address() {
        return MagickMorphImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickMorphImages(MagickWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickMorphImages(MemorySegment x0, long x1) {
        var mh$ = MagickMorphImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMorphImages", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMosaicImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickMosaicImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMosaicImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickMosaicImages$descriptor() {
        return MagickMosaicImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMosaicImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickMosaicImages$handle() {
        return MagickMosaicImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMosaicImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickMosaicImages$address() {
        return MagickMosaicImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickMosaicImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickMosaicImages(MemorySegment x0) {
        var mh$ = MagickMosaicImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMosaicImages", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMontageImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickMontageImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMontageImage(MagickWand *, const DrawingWand *, const char *, const char *, const MontageMode, const char *)
     * }
     */
    public static FunctionDescriptor MagickMontageImage$descriptor() {
        return MagickMontageImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMontageImage(MagickWand *, const DrawingWand *, const char *, const char *, const MontageMode, const char *)
     * }
     */
    public static MethodHandle MagickMontageImage$handle() {
        return MagickMontageImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMontageImage(MagickWand *, const DrawingWand *, const char *, const char *, const MontageMode, const char *)
     * }
     */
    public static MemorySegment MagickMontageImage$address() {
        return MagickMontageImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickMontageImage(MagickWand *, const DrawingWand *, const char *, const char *, const MontageMode, const char *)
     * }
     */
    public static MemorySegment MagickMontageImage(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, int x4, MemorySegment x5) {
        var mh$ = MagickMontageImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMontageImage", x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPreviewImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickPreviewImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickPreviewImages(MagickWand *wand, const PreviewType)
     * }
     */
    public static FunctionDescriptor MagickPreviewImages$descriptor() {
        return MagickPreviewImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickPreviewImages(MagickWand *wand, const PreviewType)
     * }
     */
    public static MethodHandle MagickPreviewImages$handle() {
        return MagickPreviewImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickPreviewImages(MagickWand *wand, const PreviewType)
     * }
     */
    public static MemorySegment MagickPreviewImages$address() {
        return MagickPreviewImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickPreviewImages(MagickWand *wand, const PreviewType)
     * }
     */
    public static MemorySegment MagickPreviewImages(MemorySegment wand, int x1) {
        var mh$ = MagickPreviewImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPreviewImages", wand, x1);
            }
            return (MemorySegment)mh$.invokeExact(wand, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSteganoImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSteganoImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSteganoImage(MagickWand *, const MagickWand *, const long)
     * }
     */
    public static FunctionDescriptor MagickSteganoImage$descriptor() {
        return MagickSteganoImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSteganoImage(MagickWand *, const MagickWand *, const long)
     * }
     */
    public static MethodHandle MagickSteganoImage$handle() {
        return MagickSteganoImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSteganoImage(MagickWand *, const MagickWand *, const long)
     * }
     */
    public static MemorySegment MagickSteganoImage$address() {
        return MagickSteganoImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickSteganoImage(MagickWand *, const MagickWand *, const long)
     * }
     */
    public static MemorySegment MagickSteganoImage(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = MagickSteganoImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSteganoImage", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickStereoImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickStereoImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickStereoImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickStereoImage$descriptor() {
        return MagickStereoImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickStereoImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickStereoImage$handle() {
        return MagickStereoImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickStereoImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickStereoImage$address() {
        return MagickStereoImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickStereoImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickStereoImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickStereoImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickStereoImage", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTextureImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickTextureImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTextureImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickTextureImage$descriptor() {
        return MagickTextureImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTextureImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickTextureImage$handle() {
        return MagickTextureImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTextureImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickTextureImage$address() {
        return MagickTextureImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickTextureImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickTextureImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickTextureImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTextureImage", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTransformImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickTransformImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTransformImage(MagickWand *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor MagickTransformImage$descriptor() {
        return MagickTransformImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTransformImage(MagickWand *, const char *, const char *)
     * }
     */
    public static MethodHandle MagickTransformImage$handle() {
        return MagickTransformImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTransformImage(MagickWand *, const char *, const char *)
     * }
     */
    public static MemorySegment MagickTransformImage$address() {
        return MagickTransformImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickTransformImage(MagickWand *, const char *, const char *)
     * }
     */
    public static MemorySegment MagickTransformImage(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickTransformImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTransformImage", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NewMagickWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER    );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("NewMagickWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWand()
     * }
     */
    public static FunctionDescriptor NewMagickWand$descriptor() {
        return NewMagickWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWand()
     * }
     */
    public static MethodHandle NewMagickWand$handle() {
        return NewMagickWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWand()
     * }
     */
    public static MemorySegment NewMagickWand$address() {
        return NewMagickWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWand()
     * }
     */
    public static MemorySegment NewMagickWand() {
        var mh$ = NewMagickWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NewMagickWand");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern OrientationType MagickGetImageOrientation(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageOrientation$descriptor() {
        return MagickGetImageOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern OrientationType MagickGetImageOrientation(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageOrientation$handle() {
        return MagickGetImageOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern OrientationType MagickGetImageOrientation(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageOrientation$address() {
        return MagickGetImageOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern OrientationType MagickGetImageOrientation(MagickWand *)
     * }
     */
    public static int MagickGetImageOrientation(MemorySegment x0) {
        var mh$ = MagickGetImageOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageOrientation", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageHistogram {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageHistogram");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PixelWand **MagickGetImageHistogram(MagickWand *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetImageHistogram$descriptor() {
        return MagickGetImageHistogram.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PixelWand **MagickGetImageHistogram(MagickWand *, unsigned long *)
     * }
     */
    public static MethodHandle MagickGetImageHistogram$handle() {
        return MagickGetImageHistogram.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern PixelWand **MagickGetImageHistogram(MagickWand *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetImageHistogram$address() {
        return MagickGetImageHistogram.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern PixelWand **MagickGetImageHistogram(MagickWand *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetImageHistogram(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageHistogram.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageHistogram", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageRenderingIntent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageRenderingIntent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern RenderingIntent MagickGetImageRenderingIntent(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageRenderingIntent$descriptor() {
        return MagickGetImageRenderingIntent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern RenderingIntent MagickGetImageRenderingIntent(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageRenderingIntent$handle() {
        return MagickGetImageRenderingIntent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern RenderingIntent MagickGetImageRenderingIntent(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageRenderingIntent$address() {
        return MagickGetImageRenderingIntent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern RenderingIntent MagickGetImageRenderingIntent(MagickWand *)
     * }
     */
    public static int MagickGetImageRenderingIntent(MemorySegment x0) {
        var mh$ = MagickGetImageRenderingIntent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageRenderingIntent", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageUnits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageUnits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ResolutionType MagickGetImageUnits(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageUnits$descriptor() {
        return MagickGetImageUnits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ResolutionType MagickGetImageUnits(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageUnits$handle() {
        return MagickGetImageUnits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ResolutionType MagickGetImageUnits(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageUnits$address() {
        return MagickGetImageUnits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ResolutionType MagickGetImageUnits(MagickWand *)
     * }
     */
    public static int MagickGetImageUnits(MemorySegment x0) {
        var mh$ = MagickGetImageUnits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageUnits", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DestroyMagickWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("DestroyMagickWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int DestroyMagickWand(MagickWand *)
     * }
     */
    public static FunctionDescriptor DestroyMagickWand$descriptor() {
        return DestroyMagickWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int DestroyMagickWand(MagickWand *)
     * }
     */
    public static MethodHandle DestroyMagickWand$handle() {
        return DestroyMagickWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int DestroyMagickWand(MagickWand *)
     * }
     */
    public static MemorySegment DestroyMagickWand$address() {
        return DestroyMagickWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int DestroyMagickWand(MagickWand *)
     * }
     */
    public static int DestroyMagickWand(MemorySegment x0) {
        var mh$ = DestroyMagickWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DestroyMagickWand", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAdaptiveThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickAdaptiveThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAdaptiveThresholdImage(MagickWand *, const unsigned long, const unsigned long, const long)
     * }
     */
    public static FunctionDescriptor MagickAdaptiveThresholdImage$descriptor() {
        return MagickAdaptiveThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAdaptiveThresholdImage(MagickWand *, const unsigned long, const unsigned long, const long)
     * }
     */
    public static MethodHandle MagickAdaptiveThresholdImage$handle() {
        return MagickAdaptiveThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAdaptiveThresholdImage(MagickWand *, const unsigned long, const unsigned long, const long)
     * }
     */
    public static MemorySegment MagickAdaptiveThresholdImage$address() {
        return MagickAdaptiveThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAdaptiveThresholdImage(MagickWand *, const unsigned long, const unsigned long, const long)
     * }
     */
    public static int MagickAdaptiveThresholdImage(MemorySegment x0, long x1, long x2, long x3) {
        var mh$ = MagickAdaptiveThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAdaptiveThresholdImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAddImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickAddImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAddImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickAddImage$descriptor() {
        return MagickAddImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAddImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickAddImage$handle() {
        return MagickAddImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAddImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickAddImage$address() {
        return MagickAddImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAddImage(MagickWand *, const MagickWand *)
     * }
     */
    public static int MagickAddImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickAddImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAddImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAddNoiseImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickAddNoiseImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAddNoiseImage(MagickWand *, const NoiseType)
     * }
     */
    public static FunctionDescriptor MagickAddNoiseImage$descriptor() {
        return MagickAddNoiseImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAddNoiseImage(MagickWand *, const NoiseType)
     * }
     */
    public static MethodHandle MagickAddNoiseImage$handle() {
        return MagickAddNoiseImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAddNoiseImage(MagickWand *, const NoiseType)
     * }
     */
    public static MemorySegment MagickAddNoiseImage$address() {
        return MagickAddNoiseImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAddNoiseImage(MagickWand *, const NoiseType)
     * }
     */
    public static int MagickAddNoiseImage(MemorySegment x0, int x1) {
        var mh$ = MagickAddNoiseImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAddNoiseImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAffineTransformImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickAffineTransformImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAffineTransformImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickAffineTransformImage$descriptor() {
        return MagickAffineTransformImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAffineTransformImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static MethodHandle MagickAffineTransformImage$handle() {
        return MagickAffineTransformImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAffineTransformImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static MemorySegment MagickAffineTransformImage$address() {
        return MagickAffineTransformImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAffineTransformImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static int MagickAffineTransformImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickAffineTransformImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAffineTransformImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAnnotateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickAnnotateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAnnotateImage(MagickWand *, const DrawingWand *, const double, const double, const double, const char *)
     * }
     */
    public static FunctionDescriptor MagickAnnotateImage$descriptor() {
        return MagickAnnotateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAnnotateImage(MagickWand *, const DrawingWand *, const double, const double, const double, const char *)
     * }
     */
    public static MethodHandle MagickAnnotateImage$handle() {
        return MagickAnnotateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAnnotateImage(MagickWand *, const DrawingWand *, const double, const double, const double, const char *)
     * }
     */
    public static MemorySegment MagickAnnotateImage$address() {
        return MagickAnnotateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAnnotateImage(MagickWand *, const DrawingWand *, const double, const double, const double, const char *)
     * }
     */
    public static int MagickAnnotateImage(MemorySegment x0, MemorySegment x1, double x2, double x3, double x4, MemorySegment x5) {
        var mh$ = MagickAnnotateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAnnotateImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAnimateImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickAnimateImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAnimateImages(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickAnimateImages$descriptor() {
        return MagickAnimateImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAnimateImages(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickAnimateImages$handle() {
        return MagickAnimateImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAnimateImages(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickAnimateImages$address() {
        return MagickAnimateImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAnimateImages(MagickWand *, const char *)
     * }
     */
    public static int MagickAnimateImages(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickAnimateImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAnimateImages", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAutoOrientImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickAutoOrientImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAutoOrientImage(MagickWand *wand, const OrientationType)
     * }
     */
    public static FunctionDescriptor MagickAutoOrientImage$descriptor() {
        return MagickAutoOrientImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAutoOrientImage(MagickWand *wand, const OrientationType)
     * }
     */
    public static MethodHandle MagickAutoOrientImage$handle() {
        return MagickAutoOrientImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAutoOrientImage(MagickWand *wand, const OrientationType)
     * }
     */
    public static MemorySegment MagickAutoOrientImage$address() {
        return MagickAutoOrientImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAutoOrientImage(MagickWand *wand, const OrientationType)
     * }
     */
    public static int MagickAutoOrientImage(MemorySegment wand, int x1) {
        var mh$ = MagickAutoOrientImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAutoOrientImage", wand, x1);
            }
            return (int)mh$.invokeExact(wand, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickBlackThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickBlackThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickBlackThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickBlackThresholdImage$descriptor() {
        return MagickBlackThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickBlackThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickBlackThresholdImage$handle() {
        return MagickBlackThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickBlackThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickBlackThresholdImage$address() {
        return MagickBlackThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickBlackThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickBlackThresholdImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickBlackThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickBlackThresholdImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickBlurImage$descriptor() {
        return MagickBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickBlurImage$handle() {
        return MagickBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickBlurImage$address() {
        return MagickBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickBlurImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickBlurImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickBorderImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickBorderImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickBorderImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickBorderImage$descriptor() {
        return MagickBorderImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickBorderImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MethodHandle MagickBorderImage$handle() {
        return MagickBorderImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickBorderImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MemorySegment MagickBorderImage$address() {
        return MagickBorderImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickBorderImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long)
     * }
     */
    public static int MagickBorderImage(MemorySegment x0, MemorySegment x1, long x2, long x3) {
        var mh$ = MagickBorderImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickBorderImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCdlImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickCdlImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickCdlImage(MagickWand *wand, const char *cdl)
     * }
     */
    public static FunctionDescriptor MagickCdlImage$descriptor() {
        return MagickCdlImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickCdlImage(MagickWand *wand, const char *cdl)
     * }
     */
    public static MethodHandle MagickCdlImage$handle() {
        return MagickCdlImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickCdlImage(MagickWand *wand, const char *cdl)
     * }
     */
    public static MemorySegment MagickCdlImage$address() {
        return MagickCdlImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickCdlImage(MagickWand *wand, const char *cdl)
     * }
     */
    public static int MagickCdlImage(MemorySegment wand, MemorySegment cdl) {
        var mh$ = MagickCdlImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCdlImage", wand, cdl);
            }
            return (int)mh$.invokeExact(wand, cdl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCharcoalImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickCharcoalImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickCharcoalImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickCharcoalImage$descriptor() {
        return MagickCharcoalImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickCharcoalImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickCharcoalImage$handle() {
        return MagickCharcoalImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickCharcoalImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickCharcoalImage$address() {
        return MagickCharcoalImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickCharcoalImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickCharcoalImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickCharcoalImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCharcoalImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickChopImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickChopImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickChopImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickChopImage$descriptor() {
        return MagickChopImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickChopImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static MethodHandle MagickChopImage$handle() {
        return MagickChopImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickChopImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static MemorySegment MagickChopImage$address() {
        return MagickChopImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickChopImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static int MagickChopImage(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickChopImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickChopImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickClipImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickClipImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickClipImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickClipImage$descriptor() {
        return MagickClipImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickClipImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickClipImage$handle() {
        return MagickClipImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickClipImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickClipImage$address() {
        return MagickClipImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickClipImage(MagickWand *)
     * }
     */
    public static int MagickClipImage(MemorySegment x0) {
        var mh$ = MagickClipImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickClipImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickClipPathImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickClipPathImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickClipPathImage(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickClipPathImage$descriptor() {
        return MagickClipPathImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickClipPathImage(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static MethodHandle MagickClipPathImage$handle() {
        return MagickClipPathImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickClipPathImage(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static MemorySegment MagickClipPathImage$address() {
        return MagickClipPathImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickClipPathImage(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static int MagickClipPathImage(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickClipPathImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickClipPathImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickColorFloodfillImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickColorFloodfillImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickColorFloodfillImage(MagickWand *, const PixelWand *, const double, const PixelWand *, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickColorFloodfillImage$descriptor() {
        return MagickColorFloodfillImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickColorFloodfillImage(MagickWand *, const PixelWand *, const double, const PixelWand *, const long, const long)
     * }
     */
    public static MethodHandle MagickColorFloodfillImage$handle() {
        return MagickColorFloodfillImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickColorFloodfillImage(MagickWand *, const PixelWand *, const double, const PixelWand *, const long, const long)
     * }
     */
    public static MemorySegment MagickColorFloodfillImage$address() {
        return MagickColorFloodfillImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickColorFloodfillImage(MagickWand *, const PixelWand *, const double, const PixelWand *, const long, const long)
     * }
     */
    public static int MagickColorFloodfillImage(MemorySegment x0, MemorySegment x1, double x2, MemorySegment x3, long x4, long x5) {
        var mh$ = MagickColorFloodfillImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickColorFloodfillImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickColorizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickColorizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickColorizeImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickColorizeImage$descriptor() {
        return MagickColorizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickColorizeImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickColorizeImage$handle() {
        return MagickColorizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickColorizeImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickColorizeImage$address() {
        return MagickColorizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickColorizeImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static int MagickColorizeImage(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickColorizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickColorizeImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCommentImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickCommentImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickCommentImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickCommentImage$descriptor() {
        return MagickCommentImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickCommentImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickCommentImage$handle() {
        return MagickCommentImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickCommentImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickCommentImage$address() {
        return MagickCommentImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickCommentImage(MagickWand *, const char *)
     * }
     */
    public static int MagickCommentImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickCommentImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCommentImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCompositeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickCompositeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickCompositeImage(MagickWand *, const MagickWand *, const CompositeOperator, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickCompositeImage$descriptor() {
        return MagickCompositeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickCompositeImage(MagickWand *, const MagickWand *, const CompositeOperator, const long, const long)
     * }
     */
    public static MethodHandle MagickCompositeImage$handle() {
        return MagickCompositeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickCompositeImage(MagickWand *, const MagickWand *, const CompositeOperator, const long, const long)
     * }
     */
    public static MemorySegment MagickCompositeImage$address() {
        return MagickCompositeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickCompositeImage(MagickWand *, const MagickWand *, const CompositeOperator, const long, const long)
     * }
     */
    public static int MagickCompositeImage(MemorySegment x0, MemorySegment x1, int x2, long x3, long x4) {
        var mh$ = MagickCompositeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCompositeImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickContrastImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickContrastImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickContrastImage(MagickWand *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickContrastImage$descriptor() {
        return MagickContrastImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickContrastImage(MagickWand *, const unsigned int)
     * }
     */
    public static MethodHandle MagickContrastImage$handle() {
        return MagickContrastImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickContrastImage(MagickWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickContrastImage$address() {
        return MagickContrastImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickContrastImage(MagickWand *, const unsigned int)
     * }
     */
    public static int MagickContrastImage(MemorySegment x0, int x1) {
        var mh$ = MagickContrastImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickContrastImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickConvolveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickConvolveImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickConvolveImage(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static FunctionDescriptor MagickConvolveImage$descriptor() {
        return MagickConvolveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickConvolveImage(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static MethodHandle MagickConvolveImage$handle() {
        return MagickConvolveImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickConvolveImage(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static MemorySegment MagickConvolveImage$address() {
        return MagickConvolveImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickConvolveImage(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static int MagickConvolveImage(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickConvolveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickConvolveImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCropImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickCropImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickCropImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickCropImage$descriptor() {
        return MagickCropImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickCropImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static MethodHandle MagickCropImage$handle() {
        return MagickCropImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickCropImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static MemorySegment MagickCropImage$address() {
        return MagickCropImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickCropImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static int MagickCropImage(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickCropImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCropImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCycleColormapImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickCycleColormapImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickCycleColormapImage(MagickWand *, const long)
     * }
     */
    public static FunctionDescriptor MagickCycleColormapImage$descriptor() {
        return MagickCycleColormapImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickCycleColormapImage(MagickWand *, const long)
     * }
     */
    public static MethodHandle MagickCycleColormapImage$handle() {
        return MagickCycleColormapImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickCycleColormapImage(MagickWand *, const long)
     * }
     */
    public static MemorySegment MagickCycleColormapImage$address() {
        return MagickCycleColormapImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickCycleColormapImage(MagickWand *, const long)
     * }
     */
    public static int MagickCycleColormapImage(MemorySegment x0, long x1) {
        var mh$ = MagickCycleColormapImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCycleColormapImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDespeckleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDespeckleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickDespeckleImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickDespeckleImage$descriptor() {
        return MagickDespeckleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickDespeckleImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickDespeckleImage$handle() {
        return MagickDespeckleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickDespeckleImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickDespeckleImage$address() {
        return MagickDespeckleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickDespeckleImage(MagickWand *)
     * }
     */
    public static int MagickDespeckleImage(MemorySegment x0) {
        var mh$ = MagickDespeckleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDespeckleImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDisplayImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDisplayImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDisplayImage$descriptor() {
        return MagickDisplayImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickDisplayImage$handle() {
        return MagickDisplayImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickDisplayImage$address() {
        return MagickDisplayImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImage(MagickWand *, const char *)
     * }
     */
    public static int MagickDisplayImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDisplayImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDisplayImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDisplayImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDisplayImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImages(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDisplayImages$descriptor() {
        return MagickDisplayImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImages(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickDisplayImages$handle() {
        return MagickDisplayImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImages(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickDisplayImages$address() {
        return MagickDisplayImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImages(MagickWand *, const char *)
     * }
     */
    public static int MagickDisplayImages(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDisplayImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDisplayImages", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickDrawImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawImage$descriptor() {
        return MagickDrawImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawImage$handle() {
        return MagickDrawImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawImage$address() {
        return MagickDrawImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickDrawImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static int MagickDrawImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEdgeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickEdgeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickEdgeImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickEdgeImage$descriptor() {
        return MagickEdgeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickEdgeImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickEdgeImage$handle() {
        return MagickEdgeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickEdgeImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickEdgeImage$address() {
        return MagickEdgeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickEdgeImage(MagickWand *, const double)
     * }
     */
    public static int MagickEdgeImage(MemorySegment x0, double x1) {
        var mh$ = MagickEdgeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEdgeImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEmbossImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickEmbossImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickEmbossImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickEmbossImage$descriptor() {
        return MagickEmbossImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickEmbossImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickEmbossImage$handle() {
        return MagickEmbossImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickEmbossImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickEmbossImage$address() {
        return MagickEmbossImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickEmbossImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickEmbossImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickEmbossImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEmbossImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEnhanceImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickEnhanceImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickEnhanceImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickEnhanceImage$descriptor() {
        return MagickEnhanceImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickEnhanceImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickEnhanceImage$handle() {
        return MagickEnhanceImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickEnhanceImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickEnhanceImage$address() {
        return MagickEnhanceImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickEnhanceImage(MagickWand *)
     * }
     */
    public static int MagickEnhanceImage(MemorySegment x0) {
        var mh$ = MagickEnhanceImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEnhanceImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEqualizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickEqualizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickEqualizeImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickEqualizeImage$descriptor() {
        return MagickEqualizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickEqualizeImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickEqualizeImage$handle() {
        return MagickEqualizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickEqualizeImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickEqualizeImage$address() {
        return MagickEqualizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickEqualizeImage(MagickWand *)
     * }
     */
    public static int MagickEqualizeImage(MemorySegment x0) {
        var mh$ = MagickEqualizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEqualizeImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickExtentImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickExtentImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickExtentImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickExtentImage$descriptor() {
        return MagickExtentImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickExtentImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickExtentImage$handle() {
        return MagickExtentImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickExtentImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickExtentImage$address() {
        return MagickExtentImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickExtentImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickExtentImage(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickExtentImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickExtentImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFlipImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickFlipImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickFlipImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickFlipImage$descriptor() {
        return MagickFlipImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickFlipImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickFlipImage$handle() {
        return MagickFlipImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickFlipImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickFlipImage$address() {
        return MagickFlipImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickFlipImage(MagickWand *)
     * }
     */
    public static int MagickFlipImage(MemorySegment x0) {
        var mh$ = MagickFlipImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFlipImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFlopImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickFlopImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickFlopImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickFlopImage$descriptor() {
        return MagickFlopImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickFlopImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickFlopImage$handle() {
        return MagickFlopImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickFlopImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickFlopImage$address() {
        return MagickFlopImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickFlopImage(MagickWand *)
     * }
     */
    public static int MagickFlopImage(MemorySegment x0) {
        var mh$ = MagickFlopImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFlopImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFrameImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickFrameImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickFrameImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickFrameImage$descriptor() {
        return MagickFrameImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickFrameImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static MethodHandle MagickFrameImage$handle() {
        return MagickFrameImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickFrameImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static MemorySegment MagickFrameImage$address() {
        return MagickFrameImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickFrameImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static int MagickFrameImage(MemorySegment x0, MemorySegment x1, long x2, long x3, long x4, long x5) {
        var mh$ = MagickFrameImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFrameImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGammaImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGammaImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickGammaImage$descriptor() {
        return MagickGammaImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickGammaImage$handle() {
        return MagickGammaImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickGammaImage$address() {
        return MagickGammaImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImage(MagickWand *, const double)
     * }
     */
    public static int MagickGammaImage(MemorySegment x0, double x1) {
        var mh$ = MagickGammaImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGammaImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGammaImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGammaImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static FunctionDescriptor MagickGammaImageChannel$descriptor() {
        return MagickGammaImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static MethodHandle MagickGammaImageChannel$handle() {
        return MagickGammaImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static MemorySegment MagickGammaImageChannel$address() {
        return MagickGammaImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static int MagickGammaImageChannel(MemorySegment x0, int x1, double x2) {
        var mh$ = MagickGammaImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGammaImageChannel", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageBackgroundColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageBackgroundColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBackgroundColor(MagickWand *, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageBackgroundColor$descriptor() {
        return MagickGetImageBackgroundColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBackgroundColor(MagickWand *, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImageBackgroundColor$handle() {
        return MagickGetImageBackgroundColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBackgroundColor(MagickWand *, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImageBackgroundColor$address() {
        return MagickGetImageBackgroundColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBackgroundColor(MagickWand *, PixelWand *)
     * }
     */
    public static int MagickGetImageBackgroundColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageBackgroundColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageBackgroundColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageBluePrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageBluePrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBluePrimary(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageBluePrimary$descriptor() {
        return MagickGetImageBluePrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBluePrimary(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageBluePrimary$handle() {
        return MagickGetImageBluePrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBluePrimary(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageBluePrimary$address() {
        return MagickGetImageBluePrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBluePrimary(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageBluePrimary(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageBluePrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageBluePrimary", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageBorderColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageBorderColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBorderColor(MagickWand *, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageBorderColor$descriptor() {
        return MagickGetImageBorderColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBorderColor(MagickWand *, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImageBorderColor$handle() {
        return MagickGetImageBorderColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBorderColor(MagickWand *, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImageBorderColor$address() {
        return MagickGetImageBorderColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBorderColor(MagickWand *, PixelWand *)
     * }
     */
    public static int MagickGetImageBorderColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageBorderColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageBorderColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageBoundingBox {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageBoundingBox");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBoundingBox(MagickWand *wand, const double fuzz, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static FunctionDescriptor MagickGetImageBoundingBox$descriptor() {
        return MagickGetImageBoundingBox.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBoundingBox(MagickWand *wand, const double fuzz, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static MethodHandle MagickGetImageBoundingBox$handle() {
        return MagickGetImageBoundingBox.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBoundingBox(MagickWand *wand, const double fuzz, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static MemorySegment MagickGetImageBoundingBox$address() {
        return MagickGetImageBoundingBox.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBoundingBox(MagickWand *wand, const double fuzz, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static int MagickGetImageBoundingBox(MemorySegment wand, double fuzz, MemorySegment width, MemorySegment height, MemorySegment x, MemorySegment y) {
        var mh$ = MagickGetImageBoundingBox.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageBoundingBox", wand, fuzz, width, height, x, y);
            }
            return (int)mh$.invokeExact(wand, fuzz, width, height, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageChannelExtrema {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageChannelExtrema");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelExtrema(MagickWand *, const ChannelType, unsigned long *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetImageChannelExtrema$descriptor() {
        return MagickGetImageChannelExtrema.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelExtrema(MagickWand *, const ChannelType, unsigned long *, unsigned long *)
     * }
     */
    public static MethodHandle MagickGetImageChannelExtrema$handle() {
        return MagickGetImageChannelExtrema.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelExtrema(MagickWand *, const ChannelType, unsigned long *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetImageChannelExtrema$address() {
        return MagickGetImageChannelExtrema.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelExtrema(MagickWand *, const ChannelType, unsigned long *, unsigned long *)
     * }
     */
    public static int MagickGetImageChannelExtrema(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MagickGetImageChannelExtrema.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageChannelExtrema", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageChannelMean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageChannelMean");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelMean(MagickWand *, const ChannelType, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageChannelMean$descriptor() {
        return MagickGetImageChannelMean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelMean(MagickWand *, const ChannelType, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageChannelMean$handle() {
        return MagickGetImageChannelMean.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelMean(MagickWand *, const ChannelType, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageChannelMean$address() {
        return MagickGetImageChannelMean.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelMean(MagickWand *, const ChannelType, double *, double *)
     * }
     */
    public static int MagickGetImageChannelMean(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MagickGetImageChannelMean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageChannelMean", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageColormapColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageColormapColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageColormapColor(MagickWand *, const unsigned long, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageColormapColor$descriptor() {
        return MagickGetImageColormapColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageColormapColor(MagickWand *, const unsigned long, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImageColormapColor$handle() {
        return MagickGetImageColormapColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageColormapColor(MagickWand *, const unsigned long, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImageColormapColor$address() {
        return MagickGetImageColormapColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageColormapColor(MagickWand *, const unsigned long, PixelWand *)
     * }
     */
    public static int MagickGetImageColormapColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickGetImageColormapColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageColormapColor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageExtrema {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageExtrema");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageExtrema(MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetImageExtrema$descriptor() {
        return MagickGetImageExtrema.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageExtrema(MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static MethodHandle MagickGetImageExtrema$handle() {
        return MagickGetImageExtrema.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageExtrema(MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetImageExtrema$address() {
        return MagickGetImageExtrema.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageExtrema(MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static int MagickGetImageExtrema(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageExtrema.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageExtrema", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageGreenPrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageGreenPrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageGreenPrimary(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageGreenPrimary$descriptor() {
        return MagickGetImageGreenPrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageGreenPrimary(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageGreenPrimary$handle() {
        return MagickGetImageGreenPrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageGreenPrimary(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageGreenPrimary$address() {
        return MagickGetImageGreenPrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageGreenPrimary(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageGreenPrimary(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageGreenPrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageGreenPrimary", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageMatte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageMatte");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatte(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageMatte$descriptor() {
        return MagickGetImageMatte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatte(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageMatte$handle() {
        return MagickGetImageMatte.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatte(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageMatte$address() {
        return MagickGetImageMatte.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatte(MagickWand *)
     * }
     */
    public static int MagickGetImageMatte(MemorySegment x0) {
        var mh$ = MagickGetImageMatte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageMatte", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageMatteColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageMatteColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatteColor(MagickWand *, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageMatteColor$descriptor() {
        return MagickGetImageMatteColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatteColor(MagickWand *, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImageMatteColor$handle() {
        return MagickGetImageMatteColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatteColor(MagickWand *, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImageMatteColor$address() {
        return MagickGetImageMatteColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatteColor(MagickWand *, PixelWand *)
     * }
     */
    public static int MagickGetImageMatteColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageMatteColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageMatteColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImagePage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImagePage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePage(MagickWand *wand, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static FunctionDescriptor MagickGetImagePage$descriptor() {
        return MagickGetImagePage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePage(MagickWand *wand, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static MethodHandle MagickGetImagePage$handle() {
        return MagickGetImagePage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePage(MagickWand *wand, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static MemorySegment MagickGetImagePage$address() {
        return MagickGetImagePage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePage(MagickWand *wand, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static int MagickGetImagePage(MemorySegment wand, MemorySegment width, MemorySegment height, MemorySegment x, MemorySegment y) {
        var mh$ = MagickGetImagePage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImagePage", wand, width, height, x, y);
            }
            return (int)mh$.invokeExact(wand, width, height, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImagePixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImagePixels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static FunctionDescriptor MagickGetImagePixels$descriptor() {
        return MagickGetImagePixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static MethodHandle MagickGetImagePixels$handle() {
        return MagickGetImagePixels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static MemorySegment MagickGetImagePixels$address() {
        return MagickGetImagePixels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static int MagickGetImagePixels(MemorySegment x0, long x1, long x2, long x3, long x4, MemorySegment x5, int x6, MemorySegment x7) {
        var mh$ = MagickGetImagePixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImagePixels", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageRedPrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageRedPrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageRedPrimary(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageRedPrimary$descriptor() {
        return MagickGetImageRedPrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageRedPrimary(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageRedPrimary$handle() {
        return MagickGetImageRedPrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageRedPrimary(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageRedPrimary$address() {
        return MagickGetImageRedPrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageRedPrimary(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageRedPrimary(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageRedPrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageRedPrimary", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageResolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageResolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageResolution(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageResolution$descriptor() {
        return MagickGetImageResolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageResolution(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageResolution$handle() {
        return MagickGetImageResolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageResolution(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageResolution$address() {
        return MagickGetImageResolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageResolution(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageResolution(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageResolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageResolution", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageWhitePoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageWhitePoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageWhitePoint(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageWhitePoint$descriptor() {
        return MagickGetImageWhitePoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageWhitePoint(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageWhitePoint$handle() {
        return MagickGetImageWhitePoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageWhitePoint(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageWhitePoint$address() {
        return MagickGetImageWhitePoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageWhitePoint(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageWhitePoint(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageWhitePoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageWhitePoint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetSize(const MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetSize$descriptor() {
        return MagickGetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetSize(const MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static MethodHandle MagickGetSize$handle() {
        return MagickGetSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetSize(const MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetSize$address() {
        return MagickGetSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetSize(const MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static int MagickGetSize(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickHaldClutImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickHaldClutImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickHaldClutImage(MagickWand *wand, const MagickWand *clut_wand)
     * }
     */
    public static FunctionDescriptor MagickHaldClutImage$descriptor() {
        return MagickHaldClutImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickHaldClutImage(MagickWand *wand, const MagickWand *clut_wand)
     * }
     */
    public static MethodHandle MagickHaldClutImage$handle() {
        return MagickHaldClutImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickHaldClutImage(MagickWand *wand, const MagickWand *clut_wand)
     * }
     */
    public static MemorySegment MagickHaldClutImage$address() {
        return MagickHaldClutImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickHaldClutImage(MagickWand *wand, const MagickWand *clut_wand)
     * }
     */
    public static int MagickHaldClutImage(MemorySegment wand, MemorySegment clut_wand) {
        var mh$ = MagickHaldClutImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickHaldClutImage", wand, clut_wand);
            }
            return (int)mh$.invokeExact(wand, clut_wand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickHasColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickHasColormap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasColormap(MagickWand *, unsigned int *)
     * }
     */
    public static FunctionDescriptor MagickHasColormap$descriptor() {
        return MagickHasColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasColormap(MagickWand *, unsigned int *)
     * }
     */
    public static MethodHandle MagickHasColormap$handle() {
        return MagickHasColormap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasColormap(MagickWand *, unsigned int *)
     * }
     */
    public static MemorySegment MagickHasColormap$address() {
        return MagickHasColormap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickHasColormap(MagickWand *, unsigned int *)
     * }
     */
    public static int MagickHasColormap(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickHasColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickHasColormap", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickHasNextImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickHasNextImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasNextImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickHasNextImage$descriptor() {
        return MagickHasNextImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasNextImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickHasNextImage$handle() {
        return MagickHasNextImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasNextImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickHasNextImage$address() {
        return MagickHasNextImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickHasNextImage(MagickWand *)
     * }
     */
    public static int MagickHasNextImage(MemorySegment x0) {
        var mh$ = MagickHasNextImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickHasNextImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickHasPreviousImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickHasPreviousImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasPreviousImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickHasPreviousImage$descriptor() {
        return MagickHasPreviousImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasPreviousImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickHasPreviousImage$handle() {
        return MagickHasPreviousImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasPreviousImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickHasPreviousImage$address() {
        return MagickHasPreviousImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickHasPreviousImage(MagickWand *)
     * }
     */
    public static int MagickHasPreviousImage(MemorySegment x0) {
        var mh$ = MagickHasPreviousImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickHasPreviousImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickImplodeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickImplodeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickImplodeImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickImplodeImage$descriptor() {
        return MagickImplodeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickImplodeImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickImplodeImage$handle() {
        return MagickImplodeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickImplodeImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickImplodeImage$address() {
        return MagickImplodeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickImplodeImage(MagickWand *, const double)
     * }
     */
    public static int MagickImplodeImage(MemorySegment x0, double x1) {
        var mh$ = MagickImplodeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickImplodeImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickIsGrayImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickIsGrayImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsGrayImage(MagickWand *, unsigned int *)
     * }
     */
    public static FunctionDescriptor MagickIsGrayImage$descriptor() {
        return MagickIsGrayImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsGrayImage(MagickWand *, unsigned int *)
     * }
     */
    public static MethodHandle MagickIsGrayImage$handle() {
        return MagickIsGrayImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsGrayImage(MagickWand *, unsigned int *)
     * }
     */
    public static MemorySegment MagickIsGrayImage$address() {
        return MagickIsGrayImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickIsGrayImage(MagickWand *, unsigned int *)
     * }
     */
    public static int MagickIsGrayImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickIsGrayImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickIsGrayImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickIsMonochromeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickIsMonochromeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsMonochromeImage(MagickWand *, unsigned int *)
     * }
     */
    public static FunctionDescriptor MagickIsMonochromeImage$descriptor() {
        return MagickIsMonochromeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsMonochromeImage(MagickWand *, unsigned int *)
     * }
     */
    public static MethodHandle MagickIsMonochromeImage$handle() {
        return MagickIsMonochromeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsMonochromeImage(MagickWand *, unsigned int *)
     * }
     */
    public static MemorySegment MagickIsMonochromeImage$address() {
        return MagickIsMonochromeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickIsMonochromeImage(MagickWand *, unsigned int *)
     * }
     */
    public static int MagickIsMonochromeImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickIsMonochromeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickIsMonochromeImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickIsOpaqueImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickIsOpaqueImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsOpaqueImage(MagickWand *, unsigned int *)
     * }
     */
    public static FunctionDescriptor MagickIsOpaqueImage$descriptor() {
        return MagickIsOpaqueImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsOpaqueImage(MagickWand *, unsigned int *)
     * }
     */
    public static MethodHandle MagickIsOpaqueImage$handle() {
        return MagickIsOpaqueImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsOpaqueImage(MagickWand *, unsigned int *)
     * }
     */
    public static MemorySegment MagickIsOpaqueImage$address() {
        return MagickIsOpaqueImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickIsOpaqueImage(MagickWand *, unsigned int *)
     * }
     */
    public static int MagickIsOpaqueImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickIsOpaqueImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickIsOpaqueImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickIsPaletteImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickIsPaletteImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsPaletteImage(MagickWand *, unsigned int *)
     * }
     */
    public static FunctionDescriptor MagickIsPaletteImage$descriptor() {
        return MagickIsPaletteImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsPaletteImage(MagickWand *, unsigned int *)
     * }
     */
    public static MethodHandle MagickIsPaletteImage$handle() {
        return MagickIsPaletteImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsPaletteImage(MagickWand *, unsigned int *)
     * }
     */
    public static MemorySegment MagickIsPaletteImage$address() {
        return MagickIsPaletteImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickIsPaletteImage(MagickWand *, unsigned int *)
     * }
     */
    public static int MagickIsPaletteImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickIsPaletteImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickIsPaletteImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLabelImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickLabelImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickLabelImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickLabelImage$descriptor() {
        return MagickLabelImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickLabelImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickLabelImage$handle() {
        return MagickLabelImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickLabelImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickLabelImage$address() {
        return MagickLabelImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickLabelImage(MagickWand *, const char *)
     * }
     */
    public static int MagickLabelImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickLabelImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLabelImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLevelImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickLevelImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickLevelImage$descriptor() {
        return MagickLevelImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickLevelImage$handle() {
        return MagickLevelImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickLevelImage$address() {
        return MagickLevelImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickLevelImage(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickLevelImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLevelImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLevelImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickLevelImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImageChannel(MagickWand *, const ChannelType, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickLevelImageChannel$descriptor() {
        return MagickLevelImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImageChannel(MagickWand *, const ChannelType, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickLevelImageChannel$handle() {
        return MagickLevelImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImageChannel(MagickWand *, const ChannelType, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickLevelImageChannel$address() {
        return MagickLevelImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImageChannel(MagickWand *, const ChannelType, const double, const double, const double)
     * }
     */
    public static int MagickLevelImageChannel(MemorySegment x0, int x1, double x2, double x3, double x4) {
        var mh$ = MagickLevelImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLevelImageChannel", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMagnifyImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickMagnifyImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickMagnifyImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickMagnifyImage$descriptor() {
        return MagickMagnifyImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickMagnifyImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickMagnifyImage$handle() {
        return MagickMagnifyImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickMagnifyImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickMagnifyImage$address() {
        return MagickMagnifyImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickMagnifyImage(MagickWand *)
     * }
     */
    public static int MagickMagnifyImage(MemorySegment x0) {
        var mh$ = MagickMagnifyImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMagnifyImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMapImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickMapImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickMapImage(MagickWand *, const MagickWand *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickMapImage$descriptor() {
        return MagickMapImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickMapImage(MagickWand *, const MagickWand *, const unsigned int)
     * }
     */
    public static MethodHandle MagickMapImage$handle() {
        return MagickMapImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickMapImage(MagickWand *, const MagickWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickMapImage$address() {
        return MagickMapImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickMapImage(MagickWand *, const MagickWand *, const unsigned int)
     * }
     */
    public static int MagickMapImage(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickMapImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMapImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMatteFloodfillImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_SHORT,
            magick_wand.C_DOUBLE,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickMatteFloodfillImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickMatteFloodfillImage(MagickWand *, const Quantum, const double, const PixelWand *, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickMatteFloodfillImage$descriptor() {
        return MagickMatteFloodfillImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickMatteFloodfillImage(MagickWand *, const Quantum, const double, const PixelWand *, const long, const long)
     * }
     */
    public static MethodHandle MagickMatteFloodfillImage$handle() {
        return MagickMatteFloodfillImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickMatteFloodfillImage(MagickWand *, const Quantum, const double, const PixelWand *, const long, const long)
     * }
     */
    public static MemorySegment MagickMatteFloodfillImage$address() {
        return MagickMatteFloodfillImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickMatteFloodfillImage(MagickWand *, const Quantum, const double, const PixelWand *, const long, const long)
     * }
     */
    public static int MagickMatteFloodfillImage(MemorySegment x0, short x1, double x2, MemorySegment x3, long x4, long x5) {
        var mh$ = MagickMatteFloodfillImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMatteFloodfillImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMedianFilterImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickMedianFilterImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickMedianFilterImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickMedianFilterImage$descriptor() {
        return MagickMedianFilterImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickMedianFilterImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickMedianFilterImage$handle() {
        return MagickMedianFilterImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickMedianFilterImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickMedianFilterImage$address() {
        return MagickMedianFilterImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickMedianFilterImage(MagickWand *, const double)
     * }
     */
    public static int MagickMedianFilterImage(MemorySegment x0, double x1) {
        var mh$ = MagickMedianFilterImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMedianFilterImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMinifyImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickMinifyImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickMinifyImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickMinifyImage$descriptor() {
        return MagickMinifyImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickMinifyImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickMinifyImage$handle() {
        return MagickMinifyImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickMinifyImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickMinifyImage$address() {
        return MagickMinifyImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickMinifyImage(MagickWand *)
     * }
     */
    public static int MagickMinifyImage(MemorySegment x0) {
        var mh$ = MagickMinifyImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMinifyImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickModulateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickModulateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickModulateImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickModulateImage$descriptor() {
        return MagickModulateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickModulateImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickModulateImage$handle() {
        return MagickModulateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickModulateImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickModulateImage$address() {
        return MagickModulateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickModulateImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickModulateImage(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickModulateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickModulateImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMotionBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickMotionBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickMotionBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickMotionBlurImage$descriptor() {
        return MagickMotionBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickMotionBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickMotionBlurImage$handle() {
        return MagickMotionBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickMotionBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickMotionBlurImage$address() {
        return MagickMotionBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickMotionBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickMotionBlurImage(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickMotionBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMotionBlurImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNegateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickNegateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImage(MagickWand *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickNegateImage$descriptor() {
        return MagickNegateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImage(MagickWand *, const unsigned int)
     * }
     */
    public static MethodHandle MagickNegateImage$handle() {
        return MagickNegateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImage(MagickWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickNegateImage$address() {
        return MagickNegateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImage(MagickWand *, const unsigned int)
     * }
     */
    public static int MagickNegateImage(MemorySegment x0, int x1) {
        var mh$ = MagickNegateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNegateImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNegateImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickNegateImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImageChannel(MagickWand *, const ChannelType, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickNegateImageChannel$descriptor() {
        return MagickNegateImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImageChannel(MagickWand *, const ChannelType, const unsigned int)
     * }
     */
    public static MethodHandle MagickNegateImageChannel$handle() {
        return MagickNegateImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImageChannel(MagickWand *, const ChannelType, const unsigned int)
     * }
     */
    public static MemorySegment MagickNegateImageChannel$address() {
        return MagickNegateImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImageChannel(MagickWand *, const ChannelType, const unsigned int)
     * }
     */
    public static int MagickNegateImageChannel(MemorySegment x0, int x1, int x2) {
        var mh$ = MagickNegateImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNegateImageChannel", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNextImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickNextImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickNextImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickNextImage$descriptor() {
        return MagickNextImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickNextImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickNextImage$handle() {
        return MagickNextImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickNextImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickNextImage$address() {
        return MagickNextImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickNextImage(MagickWand *)
     * }
     */
    public static int MagickNextImage(MemorySegment x0) {
        var mh$ = MagickNextImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNextImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNormalizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickNormalizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickNormalizeImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickNormalizeImage$descriptor() {
        return MagickNormalizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickNormalizeImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickNormalizeImage$handle() {
        return MagickNormalizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickNormalizeImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickNormalizeImage$address() {
        return MagickNormalizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickNormalizeImage(MagickWand *)
     * }
     */
    public static int MagickNormalizeImage(MemorySegment x0) {
        var mh$ = MagickNormalizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNormalizeImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickOilPaintImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickOilPaintImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickOilPaintImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickOilPaintImage$descriptor() {
        return MagickOilPaintImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickOilPaintImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickOilPaintImage$handle() {
        return MagickOilPaintImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickOilPaintImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickOilPaintImage$address() {
        return MagickOilPaintImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickOilPaintImage(MagickWand *, const double)
     * }
     */
    public static int MagickOilPaintImage(MemorySegment x0, double x1) {
        var mh$ = MagickOilPaintImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickOilPaintImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickOpaqueImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickOpaqueImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickOpaqueImage(MagickWand *, const PixelWand *, const PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickOpaqueImage$descriptor() {
        return MagickOpaqueImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickOpaqueImage(MagickWand *, const PixelWand *, const PixelWand *, const double)
     * }
     */
    public static MethodHandle MagickOpaqueImage$handle() {
        return MagickOpaqueImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickOpaqueImage(MagickWand *, const PixelWand *, const PixelWand *, const double)
     * }
     */
    public static MemorySegment MagickOpaqueImage$address() {
        return MagickOpaqueImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickOpaqueImage(MagickWand *, const PixelWand *, const PixelWand *, const double)
     * }
     */
    public static int MagickOpaqueImage(MemorySegment x0, MemorySegment x1, MemorySegment x2, double x3) {
        var mh$ = MagickOpaqueImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickOpaqueImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickOperatorImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_INT,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickOperatorImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickOperatorImageChannel(MagickWand *, const ChannelType, const QuantumOperator, const double)
     * }
     */
    public static FunctionDescriptor MagickOperatorImageChannel$descriptor() {
        return MagickOperatorImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickOperatorImageChannel(MagickWand *, const ChannelType, const QuantumOperator, const double)
     * }
     */
    public static MethodHandle MagickOperatorImageChannel$handle() {
        return MagickOperatorImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickOperatorImageChannel(MagickWand *, const ChannelType, const QuantumOperator, const double)
     * }
     */
    public static MemorySegment MagickOperatorImageChannel$address() {
        return MagickOperatorImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickOperatorImageChannel(MagickWand *, const ChannelType, const QuantumOperator, const double)
     * }
     */
    public static int MagickOperatorImageChannel(MemorySegment x0, int x1, int x2, double x3) {
        var mh$ = MagickOperatorImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickOperatorImageChannel", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPingImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickPingImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickPingImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickPingImage$descriptor() {
        return MagickPingImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickPingImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickPingImage$handle() {
        return MagickPingImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickPingImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickPingImage$address() {
        return MagickPingImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickPingImage(MagickWand *, const char *)
     * }
     */
    public static int MagickPingImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickPingImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPingImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPreviousImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickPreviousImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickPreviousImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickPreviousImage$descriptor() {
        return MagickPreviousImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickPreviousImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickPreviousImage$handle() {
        return MagickPreviousImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickPreviousImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickPreviousImage$address() {
        return MagickPreviousImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickPreviousImage(MagickWand *)
     * }
     */
    public static int MagickPreviousImage(MemorySegment x0) {
        var mh$ = MagickPreviousImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPreviousImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickProfileImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickProfileImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickProfileImage(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickProfileImage$descriptor() {
        return MagickProfileImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickProfileImage(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static MethodHandle MagickProfileImage$handle() {
        return MagickProfileImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickProfileImage(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static MemorySegment MagickProfileImage$address() {
        return MagickProfileImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickProfileImage(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static int MagickProfileImage(MemorySegment x0, MemorySegment x1, MemorySegment x2, long x3) {
        var mh$ = MagickProfileImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickProfileImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQuantizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_INT,
            magick_wand.C_LONG,
            magick_wand.C_INT,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickQuantizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImage(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickQuantizeImage$descriptor() {
        return MagickQuantizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImage(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static MethodHandle MagickQuantizeImage$handle() {
        return MagickQuantizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImage(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static MemorySegment MagickQuantizeImage$address() {
        return MagickQuantizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImage(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static int MagickQuantizeImage(MemorySegment x0, long x1, int x2, long x3, int x4, int x5) {
        var mh$ = MagickQuantizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQuantizeImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQuantizeImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_INT,
            magick_wand.C_LONG,
            magick_wand.C_INT,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickQuantizeImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImages(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickQuantizeImages$descriptor() {
        return MagickQuantizeImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImages(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static MethodHandle MagickQuantizeImages$handle() {
        return MagickQuantizeImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImages(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static MemorySegment MagickQuantizeImages$address() {
        return MagickQuantizeImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImages(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static int MagickQuantizeImages(MemorySegment x0, long x1, int x2, long x3, int x4, int x5) {
        var mh$ = MagickQuantizeImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQuantizeImages", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRadialBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickRadialBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRadialBlurImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickRadialBlurImage$descriptor() {
        return MagickRadialBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRadialBlurImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickRadialBlurImage$handle() {
        return MagickRadialBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRadialBlurImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickRadialBlurImage$address() {
        return MagickRadialBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRadialBlurImage(MagickWand *, const double)
     * }
     */
    public static int MagickRadialBlurImage(MemorySegment x0, double x1) {
        var mh$ = MagickRadialBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRadialBlurImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRaiseImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickRaiseImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRaiseImage(MagickWand *, const unsigned long, const unsigned long, const long, const long, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickRaiseImage$descriptor() {
        return MagickRaiseImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRaiseImage(MagickWand *, const unsigned long, const unsigned long, const long, const long, const unsigned int)
     * }
     */
    public static MethodHandle MagickRaiseImage$handle() {
        return MagickRaiseImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRaiseImage(MagickWand *, const unsigned long, const unsigned long, const long, const long, const unsigned int)
     * }
     */
    public static MemorySegment MagickRaiseImage$address() {
        return MagickRaiseImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRaiseImage(MagickWand *, const unsigned long, const unsigned long, const long, const long, const unsigned int)
     * }
     */
    public static int MagickRaiseImage(MemorySegment x0, long x1, long x2, long x3, long x4, int x5) {
        var mh$ = MagickRaiseImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRaiseImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickReadImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickReadImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickReadImage$descriptor() {
        return MagickReadImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickReadImage$handle() {
        return MagickReadImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickReadImage$address() {
        return MagickReadImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickReadImage(MagickWand *, const char *)
     * }
     */
    public static int MagickReadImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickReadImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickReadImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickReadImageBlob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickReadImageBlob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageBlob(MagickWand *, const unsigned char *, const size_t length)
     * }
     */
    public static FunctionDescriptor MagickReadImageBlob$descriptor() {
        return MagickReadImageBlob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageBlob(MagickWand *, const unsigned char *, const size_t length)
     * }
     */
    public static MethodHandle MagickReadImageBlob$handle() {
        return MagickReadImageBlob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageBlob(MagickWand *, const unsigned char *, const size_t length)
     * }
     */
    public static MemorySegment MagickReadImageBlob$address() {
        return MagickReadImageBlob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageBlob(MagickWand *, const unsigned char *, const size_t length)
     * }
     */
    public static int MagickReadImageBlob(MemorySegment x0, MemorySegment x1, long length) {
        var mh$ = MagickReadImageBlob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickReadImageBlob", x0, x1, length);
            }
            return (int)mh$.invokeExact(x0, x1, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickReadImageFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickReadImageFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageFile(MagickWand *, FILE *)
     * }
     */
    public static FunctionDescriptor MagickReadImageFile$descriptor() {
        return MagickReadImageFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageFile(MagickWand *, FILE *)
     * }
     */
    public static MethodHandle MagickReadImageFile$handle() {
        return MagickReadImageFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageFile(MagickWand *, FILE *)
     * }
     */
    public static MemorySegment MagickReadImageFile$address() {
        return MagickReadImageFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageFile(MagickWand *, FILE *)
     * }
     */
    public static int MagickReadImageFile(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickReadImageFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickReadImageFile", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickReduceNoiseImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickReduceNoiseImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickReduceNoiseImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickReduceNoiseImage$descriptor() {
        return MagickReduceNoiseImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickReduceNoiseImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickReduceNoiseImage$handle() {
        return MagickReduceNoiseImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickReduceNoiseImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickReduceNoiseImage$address() {
        return MagickReduceNoiseImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickReduceNoiseImage(MagickWand *, const double)
     * }
     */
    public static int MagickReduceNoiseImage(MemorySegment x0, double x1) {
        var mh$ = MagickReduceNoiseImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickReduceNoiseImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRelinquishMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickRelinquishMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRelinquishMemory(void *)
     * }
     */
    public static FunctionDescriptor MagickRelinquishMemory$descriptor() {
        return MagickRelinquishMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRelinquishMemory(void *)
     * }
     */
    public static MethodHandle MagickRelinquishMemory$handle() {
        return MagickRelinquishMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRelinquishMemory(void *)
     * }
     */
    public static MemorySegment MagickRelinquishMemory$address() {
        return MagickRelinquishMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRelinquishMemory(void *)
     * }
     */
    public static int MagickRelinquishMemory(MemorySegment x0) {
        var mh$ = MagickRelinquishMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRelinquishMemory", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRemoveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickRemoveImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickRemoveImage$descriptor() {
        return MagickRemoveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickRemoveImage$handle() {
        return MagickRemoveImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickRemoveImage$address() {
        return MagickRemoveImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImage(MagickWand *)
     * }
     */
    public static int MagickRemoveImage(MemorySegment x0) {
        var mh$ = MagickRemoveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRemoveImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRemoveImageOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickRemoveImageOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImageOption(MagickWand *wand, const char *, const char *)
     * }
     */
    public static FunctionDescriptor MagickRemoveImageOption$descriptor() {
        return MagickRemoveImageOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImageOption(MagickWand *wand, const char *, const char *)
     * }
     */
    public static MethodHandle MagickRemoveImageOption$handle() {
        return MagickRemoveImageOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImageOption(MagickWand *wand, const char *, const char *)
     * }
     */
    public static MemorySegment MagickRemoveImageOption$address() {
        return MagickRemoveImageOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImageOption(MagickWand *wand, const char *, const char *)
     * }
     */
    public static int MagickRemoveImageOption(MemorySegment wand, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickRemoveImageOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRemoveImageOption", wand, x1, x2);
            }
            return (int)mh$.invokeExact(wand, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickResampleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_INT,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickResampleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickResampleImage(MagickWand *, const double, const double, const FilterTypes, const double)
     * }
     */
    public static FunctionDescriptor MagickResampleImage$descriptor() {
        return MagickResampleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickResampleImage(MagickWand *, const double, const double, const FilterTypes, const double)
     * }
     */
    public static MethodHandle MagickResampleImage$handle() {
        return MagickResampleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickResampleImage(MagickWand *, const double, const double, const FilterTypes, const double)
     * }
     */
    public static MemorySegment MagickResampleImage$address() {
        return MagickResampleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickResampleImage(MagickWand *, const double, const double, const FilterTypes, const double)
     * }
     */
    public static int MagickResampleImage(MemorySegment x0, double x1, double x2, int x3, double x4) {
        var mh$ = MagickResampleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickResampleImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickResizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_INT,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickResizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickResizeImage(MagickWand *, const unsigned long, const unsigned long, const FilterTypes, const double)
     * }
     */
    public static FunctionDescriptor MagickResizeImage$descriptor() {
        return MagickResizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickResizeImage(MagickWand *, const unsigned long, const unsigned long, const FilterTypes, const double)
     * }
     */
    public static MethodHandle MagickResizeImage$handle() {
        return MagickResizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickResizeImage(MagickWand *, const unsigned long, const unsigned long, const FilterTypes, const double)
     * }
     */
    public static MemorySegment MagickResizeImage$address() {
        return MagickResizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickResizeImage(MagickWand *, const unsigned long, const unsigned long, const FilterTypes, const double)
     * }
     */
    public static int MagickResizeImage(MemorySegment x0, long x1, long x2, int x3, double x4) {
        var mh$ = MagickResizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickResizeImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRollImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickRollImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRollImage(MagickWand *, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickRollImage$descriptor() {
        return MagickRollImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRollImage(MagickWand *, const long, const long)
     * }
     */
    public static MethodHandle MagickRollImage$handle() {
        return MagickRollImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRollImage(MagickWand *, const long, const long)
     * }
     */
    public static MemorySegment MagickRollImage$address() {
        return MagickRollImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRollImage(MagickWand *, const long, const long)
     * }
     */
    public static int MagickRollImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickRollImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRollImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRotateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickRotateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRotateImage(MagickWand *, const PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickRotateImage$descriptor() {
        return MagickRotateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRotateImage(MagickWand *, const PixelWand *, const double)
     * }
     */
    public static MethodHandle MagickRotateImage$handle() {
        return MagickRotateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRotateImage(MagickWand *, const PixelWand *, const double)
     * }
     */
    public static MemorySegment MagickRotateImage$address() {
        return MagickRotateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRotateImage(MagickWand *, const PixelWand *, const double)
     * }
     */
    public static int MagickRotateImage(MemorySegment x0, MemorySegment x1, double x2) {
        var mh$ = MagickRotateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRotateImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSampleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSampleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSampleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSampleImage$descriptor() {
        return MagickSampleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSampleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MethodHandle MagickSampleImage$handle() {
        return MagickSampleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSampleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MemorySegment MagickSampleImage$address() {
        return MagickSampleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSampleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static int MagickSampleImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickSampleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSampleImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickScaleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickScaleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickScaleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickScaleImage$descriptor() {
        return MagickScaleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickScaleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MethodHandle MagickScaleImage$handle() {
        return MagickScaleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickScaleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MemorySegment MagickScaleImage$address() {
        return MagickScaleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickScaleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static int MagickScaleImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickScaleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickScaleImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSeparateImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSeparateImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSeparateImageChannel(MagickWand *, const ChannelType)
     * }
     */
    public static FunctionDescriptor MagickSeparateImageChannel$descriptor() {
        return MagickSeparateImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSeparateImageChannel(MagickWand *, const ChannelType)
     * }
     */
    public static MethodHandle MagickSeparateImageChannel$handle() {
        return MagickSeparateImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSeparateImageChannel(MagickWand *, const ChannelType)
     * }
     */
    public static MemorySegment MagickSeparateImageChannel$address() {
        return MagickSeparateImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSeparateImageChannel(MagickWand *, const ChannelType)
     * }
     */
    public static int MagickSeparateImageChannel(MemorySegment x0, int x1) {
        var mh$ = MagickSeparateImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSeparateImageChannel", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetCompressionQuality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetCompressionQuality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetCompressionQuality(MagickWand *wand, const unsigned long quality)
     * }
     */
    public static FunctionDescriptor MagickSetCompressionQuality$descriptor() {
        return MagickSetCompressionQuality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetCompressionQuality(MagickWand *wand, const unsigned long quality)
     * }
     */
    public static MethodHandle MagickSetCompressionQuality$handle() {
        return MagickSetCompressionQuality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetCompressionQuality(MagickWand *wand, const unsigned long quality)
     * }
     */
    public static MemorySegment MagickSetCompressionQuality$address() {
        return MagickSetCompressionQuality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetCompressionQuality(MagickWand *wand, const unsigned long quality)
     * }
     */
    public static int MagickSetCompressionQuality(MemorySegment wand, long quality) {
        var mh$ = MagickSetCompressionQuality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetCompressionQuality", wand, quality);
            }
            return (int)mh$.invokeExact(wand, quality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetFilename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetFilename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetFilename(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetFilename$descriptor() {
        return MagickSetFilename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetFilename(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetFilename$handle() {
        return MagickSetFilename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetFilename(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetFilename$address() {
        return MagickSetFilename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetFilename(MagickWand *, const char *)
     * }
     */
    public static int MagickSetFilename(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetFilename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetFilename", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetFormat(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetFormat$descriptor() {
        return MagickSetFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetFormat(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetFormat$handle() {
        return MagickSetFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetFormat(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetFormat$address() {
        return MagickSetFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetFormat(MagickWand *, const char *)
     * }
     */
    public static int MagickSetFormat(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetFormat", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImage$descriptor() {
        return MagickSetImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickSetImage$handle() {
        return MagickSetImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickSetImage$address() {
        return MagickSetImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImage(MagickWand *, const MagickWand *)
     * }
     */
    public static int MagickSetImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageAttribute(MagickWand *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetImageAttribute$descriptor() {
        return MagickSetImageAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageAttribute(MagickWand *, const char *, const char *)
     * }
     */
    public static MethodHandle MagickSetImageAttribute$handle() {
        return MagickSetImageAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageAttribute(MagickWand *, const char *, const char *)
     * }
     */
    public static MemorySegment MagickSetImageAttribute$address() {
        return MagickSetImageAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageAttribute(MagickWand *, const char *, const char *)
     * }
     */
    public static int MagickSetImageAttribute(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickSetImageAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageAttribute", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageBackgroundColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageBackgroundColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageBackgroundColor$descriptor() {
        return MagickSetImageBackgroundColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageBackgroundColor$handle() {
        return MagickSetImageBackgroundColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageBackgroundColor$address() {
        return MagickSetImageBackgroundColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickSetImageBackgroundColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageBackgroundColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageBackgroundColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageBluePrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageBluePrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBluePrimary(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageBluePrimary$descriptor() {
        return MagickSetImageBluePrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBluePrimary(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageBluePrimary$handle() {
        return MagickSetImageBluePrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBluePrimary(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageBluePrimary$address() {
        return MagickSetImageBluePrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBluePrimary(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSetImageBluePrimary(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSetImageBluePrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageBluePrimary", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageBorderColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageBorderColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBorderColor(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageBorderColor$descriptor() {
        return MagickSetImageBorderColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBorderColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageBorderColor$handle() {
        return MagickSetImageBorderColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBorderColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageBorderColor$address() {
        return MagickSetImageBorderColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBorderColor(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickSetImageBorderColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageBorderColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageBorderColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageChannelDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageChannelDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageChannelDepth(MagickWand *, const ChannelType, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetImageChannelDepth$descriptor() {
        return MagickSetImageChannelDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageChannelDepth(MagickWand *, const ChannelType, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetImageChannelDepth$handle() {
        return MagickSetImageChannelDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageChannelDepth(MagickWand *, const ChannelType, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetImageChannelDepth$address() {
        return MagickSetImageChannelDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageChannelDepth(MagickWand *, const ChannelType, const unsigned long)
     * }
     */
    public static int MagickSetImageChannelDepth(MemorySegment x0, int x1, long x2) {
        var mh$ = MagickSetImageChannelDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageChannelDepth", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageColormapColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageColormapColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColormapColor(MagickWand *, const unsigned long, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageColormapColor$descriptor() {
        return MagickSetImageColormapColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColormapColor(MagickWand *, const unsigned long, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageColormapColor$handle() {
        return MagickSetImageColormapColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColormapColor(MagickWand *, const unsigned long, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageColormapColor$address() {
        return MagickSetImageColormapColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColormapColor(MagickWand *, const unsigned long, const PixelWand *)
     * }
     */
    public static int MagickSetImageColormapColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickSetImageColormapColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageColormapColor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageCompose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageCompose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompose(MagickWand *, const CompositeOperator)
     * }
     */
    public static FunctionDescriptor MagickSetImageCompose$descriptor() {
        return MagickSetImageCompose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompose(MagickWand *, const CompositeOperator)
     * }
     */
    public static MethodHandle MagickSetImageCompose$handle() {
        return MagickSetImageCompose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompose(MagickWand *, const CompositeOperator)
     * }
     */
    public static MemorySegment MagickSetImageCompose$address() {
        return MagickSetImageCompose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompose(MagickWand *, const CompositeOperator)
     * }
     */
    public static int MagickSetImageCompose(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageCompose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageCompose", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageCompression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageCompression");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompression(MagickWand *, const CompressionType)
     * }
     */
    public static FunctionDescriptor MagickSetImageCompression$descriptor() {
        return MagickSetImageCompression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompression(MagickWand *, const CompressionType)
     * }
     */
    public static MethodHandle MagickSetImageCompression$handle() {
        return MagickSetImageCompression.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompression(MagickWand *, const CompressionType)
     * }
     */
    public static MemorySegment MagickSetImageCompression$address() {
        return MagickSetImageCompression.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompression(MagickWand *, const CompressionType)
     * }
     */
    public static int MagickSetImageCompression(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageCompression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageCompression", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageDelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageDelay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDelay(MagickWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetImageDelay$descriptor() {
        return MagickSetImageDelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDelay(MagickWand *, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetImageDelay$handle() {
        return MagickSetImageDelay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDelay(MagickWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetImageDelay$address() {
        return MagickSetImageDelay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDelay(MagickWand *, const unsigned long)
     * }
     */
    public static int MagickSetImageDelay(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageDelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageDelay", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDepth(MagickWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetImageDepth$descriptor() {
        return MagickSetImageDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDepth(MagickWand *, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetImageDepth$handle() {
        return MagickSetImageDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDepth(MagickWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetImageDepth$address() {
        return MagickSetImageDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDepth(MagickWand *, const unsigned long)
     * }
     */
    public static int MagickSetImageDepth(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageDepth", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageDispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageDispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDispose(MagickWand *, const DisposeType)
     * }
     */
    public static FunctionDescriptor MagickSetImageDispose$descriptor() {
        return MagickSetImageDispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDispose(MagickWand *, const DisposeType)
     * }
     */
    public static MethodHandle MagickSetImageDispose$handle() {
        return MagickSetImageDispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDispose(MagickWand *, const DisposeType)
     * }
     */
    public static MemorySegment MagickSetImageDispose$address() {
        return MagickSetImageDispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDispose(MagickWand *, const DisposeType)
     * }
     */
    public static int MagickSetImageDispose(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageDispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageDispose", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageColorspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageColorspace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static FunctionDescriptor MagickSetImageColorspace$descriptor() {
        return MagickSetImageColorspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static MethodHandle MagickSetImageColorspace$handle() {
        return MagickSetImageColorspace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static MemorySegment MagickSetImageColorspace$address() {
        return MagickSetImageColorspace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static int MagickSetImageColorspace(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageColorspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageColorspace", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageGreenPrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageGreenPrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGreenPrimary(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageGreenPrimary$descriptor() {
        return MagickSetImageGreenPrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGreenPrimary(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageGreenPrimary$handle() {
        return MagickSetImageGreenPrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGreenPrimary(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageGreenPrimary$address() {
        return MagickSetImageGreenPrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGreenPrimary(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSetImageGreenPrimary(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSetImageGreenPrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageGreenPrimary", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageGamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageGamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGamma(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageGamma$descriptor() {
        return MagickSetImageGamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGamma(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSetImageGamma$handle() {
        return MagickSetImageGamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGamma(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSetImageGamma$address() {
        return MagickSetImageGamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGamma(MagickWand *, const double)
     * }
     */
    public static int MagickSetImageGamma(MemorySegment x0, double x1) {
        var mh$ = MagickSetImageGamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageGamma", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageGeometry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGeometry(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetImageGeometry$descriptor() {
        return MagickSetImageGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGeometry(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetImageGeometry$handle() {
        return MagickSetImageGeometry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGeometry(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetImageGeometry$address() {
        return MagickSetImageGeometry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGeometry(MagickWand *, const char *)
     * }
     */
    public static int MagickSetImageGeometry(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageGeometry", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageGravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageGravity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGravity(MagickWand *, const GravityType)
     * }
     */
    public static FunctionDescriptor MagickSetImageGravity$descriptor() {
        return MagickSetImageGravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGravity(MagickWand *, const GravityType)
     * }
     */
    public static MethodHandle MagickSetImageGravity$handle() {
        return MagickSetImageGravity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGravity(MagickWand *, const GravityType)
     * }
     */
    public static MemorySegment MagickSetImageGravity$address() {
        return MagickSetImageGravity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGravity(MagickWand *, const GravityType)
     * }
     */
    public static int MagickSetImageGravity(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageGravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageGravity", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageFilename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageFilename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFilename(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetImageFilename$descriptor() {
        return MagickSetImageFilename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFilename(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetImageFilename$handle() {
        return MagickSetImageFilename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFilename(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetImageFilename$address() {
        return MagickSetImageFilename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFilename(MagickWand *, const char *)
     * }
     */
    public static int MagickSetImageFilename(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageFilename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageFilename", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFormat(MagickWand *wand, const char *format)
     * }
     */
    public static FunctionDescriptor MagickSetImageFormat$descriptor() {
        return MagickSetImageFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFormat(MagickWand *wand, const char *format)
     * }
     */
    public static MethodHandle MagickSetImageFormat$handle() {
        return MagickSetImageFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFormat(MagickWand *wand, const char *format)
     * }
     */
    public static MemorySegment MagickSetImageFormat$address() {
        return MagickSetImageFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFormat(MagickWand *wand, const char *format)
     * }
     */
    public static int MagickSetImageFormat(MemorySegment wand, MemorySegment format) {
        var mh$ = MagickSetImageFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageFormat", wand, format);
            }
            return (int)mh$.invokeExact(wand, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageFuzz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageFuzz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFuzz(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageFuzz$descriptor() {
        return MagickSetImageFuzz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFuzz(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSetImageFuzz$handle() {
        return MagickSetImageFuzz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFuzz(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSetImageFuzz$address() {
        return MagickSetImageFuzz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFuzz(MagickWand *, const double)
     * }
     */
    public static int MagickSetImageFuzz(MemorySegment x0, double x1) {
        var mh$ = MagickSetImageFuzz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageFuzz", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIndex(MagickWand *, const long)
     * }
     */
    public static FunctionDescriptor MagickSetImageIndex$descriptor() {
        return MagickSetImageIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIndex(MagickWand *, const long)
     * }
     */
    public static MethodHandle MagickSetImageIndex$handle() {
        return MagickSetImageIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIndex(MagickWand *, const long)
     * }
     */
    public static MemorySegment MagickSetImageIndex$address() {
        return MagickSetImageIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIndex(MagickWand *, const long)
     * }
     */
    public static int MagickSetImageIndex(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageIndex", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageInterlaceScheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageInterlaceScheme");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static FunctionDescriptor MagickSetImageInterlaceScheme$descriptor() {
        return MagickSetImageInterlaceScheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static MethodHandle MagickSetImageInterlaceScheme$handle() {
        return MagickSetImageInterlaceScheme.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static MemorySegment MagickSetImageInterlaceScheme$address() {
        return MagickSetImageInterlaceScheme.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static int MagickSetImageInterlaceScheme(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageInterlaceScheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageInterlaceScheme", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageIterations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageIterations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIterations(MagickWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetImageIterations$descriptor() {
        return MagickSetImageIterations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIterations(MagickWand *, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetImageIterations$handle() {
        return MagickSetImageIterations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIterations(MagickWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetImageIterations$address() {
        return MagickSetImageIterations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIterations(MagickWand *, const unsigned long)
     * }
     */
    public static int MagickSetImageIterations(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageIterations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageIterations", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageMatte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageMatte");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatte(MagickWand *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickSetImageMatte$descriptor() {
        return MagickSetImageMatte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatte(MagickWand *, const unsigned int)
     * }
     */
    public static MethodHandle MagickSetImageMatte$handle() {
        return MagickSetImageMatte.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatte(MagickWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickSetImageMatte$address() {
        return MagickSetImageMatte.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatte(MagickWand *, const unsigned int)
     * }
     */
    public static int MagickSetImageMatte(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageMatte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageMatte", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageMatteColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageMatteColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatteColor(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageMatteColor$descriptor() {
        return MagickSetImageMatteColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatteColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageMatteColor$handle() {
        return MagickSetImageMatteColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatteColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageMatteColor$address() {
        return MagickSetImageMatteColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatteColor(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickSetImageMatteColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageMatteColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageMatteColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOption(MagickWand *, const char *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetImageOption$descriptor() {
        return MagickSetImageOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOption(MagickWand *, const char *, const char *, const char *)
     * }
     */
    public static MethodHandle MagickSetImageOption$handle() {
        return MagickSetImageOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOption(MagickWand *, const char *, const char *, const char *)
     * }
     */
    public static MemorySegment MagickSetImageOption$address() {
        return MagickSetImageOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOption(MagickWand *, const char *, const char *, const char *)
     * }
     */
    public static int MagickSetImageOption(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MagickSetImageOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageOption", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static FunctionDescriptor MagickSetImageOrientation$descriptor() {
        return MagickSetImageOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static MethodHandle MagickSetImageOrientation$handle() {
        return MagickSetImageOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static MemorySegment MagickSetImageOrientation$address() {
        return MagickSetImageOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static int MagickSetImageOrientation(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageOrientation", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImagePage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImagePage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePage(MagickWand *wand, const unsigned long width, const unsigned long height, const long x, const long y)
     * }
     */
    public static FunctionDescriptor MagickSetImagePage$descriptor() {
        return MagickSetImagePage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePage(MagickWand *wand, const unsigned long width, const unsigned long height, const long x, const long y)
     * }
     */
    public static MethodHandle MagickSetImagePage$handle() {
        return MagickSetImagePage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePage(MagickWand *wand, const unsigned long width, const unsigned long height, const long x, const long y)
     * }
     */
    public static MemorySegment MagickSetImagePage$address() {
        return MagickSetImagePage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePage(MagickWand *wand, const unsigned long width, const unsigned long height, const long x, const long y)
     * }
     */
    public static int MagickSetImagePage(MemorySegment wand, long width, long height, long x, long y) {
        var mh$ = MagickSetImagePage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImagePage", wand, width, height, x, y);
            }
            return (int)mh$.invokeExact(wand, width, height, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImagePixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_LONG,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImagePixels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static FunctionDescriptor MagickSetImagePixels$descriptor() {
        return MagickSetImagePixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static MethodHandle MagickSetImagePixels$handle() {
        return MagickSetImagePixels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static MemorySegment MagickSetImagePixels$address() {
        return MagickSetImagePixels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static int MagickSetImagePixels(MemorySegment x0, long x1, long x2, long x3, long x4, MemorySegment x5, int x6, MemorySegment x7) {
        var mh$ = MagickSetImagePixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImagePixels", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageRedPrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageRedPrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRedPrimary(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageRedPrimary$descriptor() {
        return MagickSetImageRedPrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRedPrimary(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageRedPrimary$handle() {
        return MagickSetImageRedPrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRedPrimary(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageRedPrimary$address() {
        return MagickSetImageRedPrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRedPrimary(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSetImageRedPrimary(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSetImageRedPrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageRedPrimary", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageRenderingIntent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageRenderingIntent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRenderingIntent(MagickWand *, const RenderingIntent)
     * }
     */
    public static FunctionDescriptor MagickSetImageRenderingIntent$descriptor() {
        return MagickSetImageRenderingIntent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRenderingIntent(MagickWand *, const RenderingIntent)
     * }
     */
    public static MethodHandle MagickSetImageRenderingIntent$handle() {
        return MagickSetImageRenderingIntent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRenderingIntent(MagickWand *, const RenderingIntent)
     * }
     */
    public static MemorySegment MagickSetImageRenderingIntent$address() {
        return MagickSetImageRenderingIntent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRenderingIntent(MagickWand *, const RenderingIntent)
     * }
     */
    public static int MagickSetImageRenderingIntent(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageRenderingIntent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageRenderingIntent", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageResolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageResolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageResolution(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageResolution$descriptor() {
        return MagickSetImageResolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageResolution(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageResolution$handle() {
        return MagickSetImageResolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageResolution(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageResolution$address() {
        return MagickSetImageResolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageResolution(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSetImageResolution(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSetImageResolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageResolution", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageScene {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageScene");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageScene(MagickWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetImageScene$descriptor() {
        return MagickSetImageScene.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageScene(MagickWand *, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetImageScene$handle() {
        return MagickSetImageScene.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageScene(MagickWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetImageScene$address() {
        return MagickSetImageScene.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageScene(MagickWand *, const unsigned long)
     * }
     */
    public static int MagickSetImageScene(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageScene.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageScene", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageType(MagickWand *, const ImageType)
     * }
     */
    public static FunctionDescriptor MagickSetImageType$descriptor() {
        return MagickSetImageType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageType(MagickWand *, const ImageType)
     * }
     */
    public static MethodHandle MagickSetImageType$handle() {
        return MagickSetImageType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageType(MagickWand *, const ImageType)
     * }
     */
    public static MemorySegment MagickSetImageType$address() {
        return MagickSetImageType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageType(MagickWand *, const ImageType)
     * }
     */
    public static int MagickSetImageType(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageType", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageSavedType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageSavedType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageSavedType(MagickWand *, const ImageType)
     * }
     */
    public static FunctionDescriptor MagickSetImageSavedType$descriptor() {
        return MagickSetImageSavedType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageSavedType(MagickWand *, const ImageType)
     * }
     */
    public static MethodHandle MagickSetImageSavedType$handle() {
        return MagickSetImageSavedType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageSavedType(MagickWand *, const ImageType)
     * }
     */
    public static MemorySegment MagickSetImageSavedType$address() {
        return MagickSetImageSavedType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageSavedType(MagickWand *, const ImageType)
     * }
     */
    public static int MagickSetImageSavedType(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageSavedType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageSavedType", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageUnits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageUnits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageUnits(MagickWand *, const ResolutionType)
     * }
     */
    public static FunctionDescriptor MagickSetImageUnits$descriptor() {
        return MagickSetImageUnits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageUnits(MagickWand *, const ResolutionType)
     * }
     */
    public static MethodHandle MagickSetImageUnits$handle() {
        return MagickSetImageUnits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageUnits(MagickWand *, const ResolutionType)
     * }
     */
    public static MemorySegment MagickSetImageUnits$address() {
        return MagickSetImageUnits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageUnits(MagickWand *, const ResolutionType)
     * }
     */
    public static int MagickSetImageUnits(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageUnits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageUnits", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageVirtualPixelMethod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageVirtualPixelMethod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageVirtualPixelMethod(MagickWand *, const VirtualPixelMethod)
     * }
     */
    public static FunctionDescriptor MagickSetImageVirtualPixelMethod$descriptor() {
        return MagickSetImageVirtualPixelMethod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageVirtualPixelMethod(MagickWand *, const VirtualPixelMethod)
     * }
     */
    public static MethodHandle MagickSetImageVirtualPixelMethod$handle() {
        return MagickSetImageVirtualPixelMethod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageVirtualPixelMethod(MagickWand *, const VirtualPixelMethod)
     * }
     */
    public static MemorySegment MagickSetImageVirtualPixelMethod$address() {
        return MagickSetImageVirtualPixelMethod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageVirtualPixelMethod(MagickWand *, const VirtualPixelMethod)
     * }
     */
    public static int MagickSetImageVirtualPixelMethod(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageVirtualPixelMethod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageVirtualPixelMethod", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetPassphrase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetPassphrase");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetPassphrase(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetPassphrase$descriptor() {
        return MagickSetPassphrase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetPassphrase(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetPassphrase$handle() {
        return MagickSetPassphrase.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetPassphrase(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetPassphrase$address() {
        return MagickSetPassphrase.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetPassphrase(MagickWand *, const char *)
     * }
     */
    public static int MagickSetPassphrase(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetPassphrase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetPassphrase", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageProfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageProfile(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetImageProfile$descriptor() {
        return MagickSetImageProfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageProfile(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetImageProfile$handle() {
        return MagickSetImageProfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageProfile(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetImageProfile$address() {
        return MagickSetImageProfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageProfile(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static int MagickSetImageProfile(MemorySegment x0, MemorySegment x1, MemorySegment x2, long x3) {
        var mh$ = MagickSetImageProfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageProfile", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetResolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetResolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolution(MagickWand *wand, const double x_resolution, const double y_resolution)
     * }
     */
    public static FunctionDescriptor MagickSetResolution$descriptor() {
        return MagickSetResolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolution(MagickWand *wand, const double x_resolution, const double y_resolution)
     * }
     */
    public static MethodHandle MagickSetResolution$handle() {
        return MagickSetResolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolution(MagickWand *wand, const double x_resolution, const double y_resolution)
     * }
     */
    public static MemorySegment MagickSetResolution$address() {
        return MagickSetResolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolution(MagickWand *wand, const double x_resolution, const double y_resolution)
     * }
     */
    public static int MagickSetResolution(MemorySegment wand, double x_resolution, double y_resolution) {
        var mh$ = MagickSetResolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetResolution", wand, x_resolution, y_resolution);
            }
            return (int)mh$.invokeExact(wand, x_resolution, y_resolution);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetResolutionUnits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetResolutionUnits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolutionUnits(MagickWand *wand, const ResolutionType units)
     * }
     */
    public static FunctionDescriptor MagickSetResolutionUnits$descriptor() {
        return MagickSetResolutionUnits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolutionUnits(MagickWand *wand, const ResolutionType units)
     * }
     */
    public static MethodHandle MagickSetResolutionUnits$handle() {
        return MagickSetResolutionUnits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolutionUnits(MagickWand *wand, const ResolutionType units)
     * }
     */
    public static MemorySegment MagickSetResolutionUnits$address() {
        return MagickSetResolutionUnits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolutionUnits(MagickWand *wand, const ResolutionType units)
     * }
     */
    public static int MagickSetResolutionUnits(MemorySegment wand, int units) {
        var mh$ = MagickSetResolutionUnits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetResolutionUnits", wand, units);
            }
            return (int)mh$.invokeExact(wand, units);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetResourceLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_INT,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetResourceLimit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResourceLimit(const ResourceType type, const unsigned long limit)
     * }
     */
    public static FunctionDescriptor MagickSetResourceLimit$descriptor() {
        return MagickSetResourceLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResourceLimit(const ResourceType type, const unsigned long limit)
     * }
     */
    public static MethodHandle MagickSetResourceLimit$handle() {
        return MagickSetResourceLimit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResourceLimit(const ResourceType type, const unsigned long limit)
     * }
     */
    public static MemorySegment MagickSetResourceLimit$address() {
        return MagickSetResourceLimit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetResourceLimit(const ResourceType type, const unsigned long limit)
     * }
     */
    public static int MagickSetResourceLimit(int type, long limit) {
        var mh$ = MagickSetResourceLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetResourceLimit", type, limit);
            }
            return (int)mh$.invokeExact(type, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetSamplingFactors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetSamplingFactors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetSamplingFactors(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static FunctionDescriptor MagickSetSamplingFactors$descriptor() {
        return MagickSetSamplingFactors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetSamplingFactors(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static MethodHandle MagickSetSamplingFactors$handle() {
        return MagickSetSamplingFactors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetSamplingFactors(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static MemorySegment MagickSetSamplingFactors$address() {
        return MagickSetSamplingFactors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetSamplingFactors(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static int MagickSetSamplingFactors(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickSetSamplingFactors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetSamplingFactors", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetSize(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetSize$descriptor() {
        return MagickSetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetSize(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetSize$handle() {
        return MagickSetSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetSize(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetSize$address() {
        return MagickSetSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetSize(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static int MagickSetSize(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickSetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageWhitePoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetImageWhitePoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageWhitePoint(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageWhitePoint$descriptor() {
        return MagickSetImageWhitePoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageWhitePoint(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageWhitePoint$handle() {
        return MagickSetImageWhitePoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageWhitePoint(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageWhitePoint$address() {
        return MagickSetImageWhitePoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageWhitePoint(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSetImageWhitePoint(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSetImageWhitePoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageWhitePoint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetInterlaceScheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSetInterlaceScheme");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static FunctionDescriptor MagickSetInterlaceScheme$descriptor() {
        return MagickSetInterlaceScheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static MethodHandle MagickSetInterlaceScheme$handle() {
        return MagickSetInterlaceScheme.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static MemorySegment MagickSetInterlaceScheme$address() {
        return MagickSetInterlaceScheme.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static int MagickSetInterlaceScheme(MemorySegment x0, int x1) {
        var mh$ = MagickSetInterlaceScheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetInterlaceScheme", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSharpenImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSharpenImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSharpenImage$descriptor() {
        return MagickSharpenImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSharpenImage$handle() {
        return MagickSharpenImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSharpenImage$address() {
        return MagickSharpenImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSharpenImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSharpenImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSharpenImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickShaveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_LONG,
            magick_wand.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickShaveImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickShaveImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickShaveImage$descriptor() {
        return MagickShaveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickShaveImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MethodHandle MagickShaveImage$handle() {
        return MagickShaveImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickShaveImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MemorySegment MagickShaveImage$address() {
        return MagickShaveImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickShaveImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static int MagickShaveImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickShaveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickShaveImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickShearImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickShearImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickShearImage(MagickWand *, const PixelWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickShearImage$descriptor() {
        return MagickShearImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickShearImage(MagickWand *, const PixelWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickShearImage$handle() {
        return MagickShearImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickShearImage(MagickWand *, const PixelWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickShearImage$address() {
        return MagickShearImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickShearImage(MagickWand *, const PixelWand *, const double, const double)
     * }
     */
    public static int MagickShearImage(MemorySegment x0, MemorySegment x1, double x2, double x3) {
        var mh$ = MagickShearImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickShearImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSolarizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSolarizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSolarizeImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSolarizeImage$descriptor() {
        return MagickSolarizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSolarizeImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSolarizeImage$handle() {
        return MagickSolarizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSolarizeImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSolarizeImage$address() {
        return MagickSolarizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSolarizeImage(MagickWand *, const double)
     * }
     */
    public static int MagickSolarizeImage(MemorySegment x0, double x1) {
        var mh$ = MagickSolarizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSolarizeImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSpreadImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSpreadImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSpreadImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSpreadImage$descriptor() {
        return MagickSpreadImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSpreadImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSpreadImage$handle() {
        return MagickSpreadImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSpreadImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSpreadImage$address() {
        return MagickSpreadImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSpreadImage(MagickWand *, const double)
     * }
     */
    public static int MagickSpreadImage(MemorySegment x0, double x1) {
        var mh$ = MagickSpreadImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSpreadImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickStripImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickStripImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickStripImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickStripImage$descriptor() {
        return MagickStripImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickStripImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickStripImage$handle() {
        return MagickStripImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickStripImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickStripImage$address() {
        return MagickStripImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickStripImage(MagickWand *)
     * }
     */
    public static int MagickStripImage(MemorySegment x0) {
        var mh$ = MagickStripImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickStripImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSwirlImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickSwirlImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSwirlImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSwirlImage$descriptor() {
        return MagickSwirlImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSwirlImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSwirlImage$handle() {
        return MagickSwirlImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSwirlImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSwirlImage$address() {
        return MagickSwirlImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSwirlImage(MagickWand *, const double)
     * }
     */
    public static int MagickSwirlImage(MemorySegment x0, double x1) {
        var mh$ = MagickSwirlImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSwirlImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTintImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickTintImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickTintImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickTintImage$descriptor() {
        return MagickTintImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickTintImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickTintImage$handle() {
        return MagickTintImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickTintImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickTintImage$address() {
        return MagickTintImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickTintImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static int MagickTintImage(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickTintImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTintImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickThresholdImage$descriptor() {
        return MagickThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickThresholdImage$handle() {
        return MagickThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickThresholdImage$address() {
        return MagickThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImage(MagickWand *, const double)
     * }
     */
    public static int MagickThresholdImage(MemorySegment x0, double x1) {
        var mh$ = MagickThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickThresholdImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickThresholdImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_INT,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickThresholdImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static FunctionDescriptor MagickThresholdImageChannel$descriptor() {
        return MagickThresholdImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static MethodHandle MagickThresholdImageChannel$handle() {
        return MagickThresholdImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static MemorySegment MagickThresholdImageChannel$address() {
        return MagickThresholdImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static int MagickThresholdImageChannel(MemorySegment x0, int x1, double x2) {
        var mh$ = MagickThresholdImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickThresholdImageChannel", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTransparentImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_SHORT,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickTransparentImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickTransparentImage(MagickWand *, const PixelWand *, const Quantum, const double)
     * }
     */
    public static FunctionDescriptor MagickTransparentImage$descriptor() {
        return MagickTransparentImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickTransparentImage(MagickWand *, const PixelWand *, const Quantum, const double)
     * }
     */
    public static MethodHandle MagickTransparentImage$handle() {
        return MagickTransparentImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickTransparentImage(MagickWand *, const PixelWand *, const Quantum, const double)
     * }
     */
    public static MemorySegment MagickTransparentImage$address() {
        return MagickTransparentImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickTransparentImage(MagickWand *, const PixelWand *, const Quantum, const double)
     * }
     */
    public static int MagickTransparentImage(MemorySegment x0, MemorySegment x1, short x2, double x3) {
        var mh$ = MagickTransparentImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTransparentImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTrimImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickTrimImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickTrimImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickTrimImage$descriptor() {
        return MagickTrimImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickTrimImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickTrimImage$handle() {
        return MagickTrimImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickTrimImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickTrimImage$address() {
        return MagickTrimImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickTrimImage(MagickWand *, const double)
     * }
     */
    public static int MagickTrimImage(MemorySegment x0, double x1) {
        var mh$ = MagickTrimImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTrimImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickUnsharpMaskImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickUnsharpMaskImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickUnsharpMaskImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickUnsharpMaskImage$descriptor() {
        return MagickUnsharpMaskImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickUnsharpMaskImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickUnsharpMaskImage$handle() {
        return MagickUnsharpMaskImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickUnsharpMaskImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickUnsharpMaskImage$address() {
        return MagickUnsharpMaskImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickUnsharpMaskImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static int MagickUnsharpMaskImage(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickUnsharpMaskImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickUnsharpMaskImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWaveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_DOUBLE,
            magick_wand.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickWaveImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickWaveImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickWaveImage$descriptor() {
        return MagickWaveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickWaveImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickWaveImage$handle() {
        return MagickWaveImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickWaveImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickWaveImage$address() {
        return MagickWaveImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickWaveImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickWaveImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickWaveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWaveImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWhiteThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickWhiteThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickWhiteThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickWhiteThresholdImage$descriptor() {
        return MagickWhiteThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickWhiteThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickWhiteThresholdImage$handle() {
        return MagickWhiteThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickWhiteThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickWhiteThresholdImage$address() {
        return MagickWhiteThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickWhiteThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickWhiteThresholdImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickWhiteThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWhiteThresholdImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickWriteImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickWriteImage$descriptor() {
        return MagickWriteImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickWriteImage$handle() {
        return MagickWriteImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickWriteImage$address() {
        return MagickWriteImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImage(MagickWand *, const char *)
     * }
     */
    public static int MagickWriteImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickWriteImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImageFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickWriteImageFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImageFile(MagickWand *, FILE *)
     * }
     */
    public static FunctionDescriptor MagickWriteImageFile$descriptor() {
        return MagickWriteImageFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImageFile(MagickWand *, FILE *)
     * }
     */
    public static MethodHandle MagickWriteImageFile$handle() {
        return MagickWriteImageFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImageFile(MagickWand *, FILE *)
     * }
     */
    public static MemorySegment MagickWriteImageFile$address() {
        return MagickWriteImageFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImageFile(MagickWand *, FILE *)
     * }
     */
    public static int MagickWriteImageFile(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickWriteImageFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImageFile", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImagesFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickWriteImagesFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImagesFile(MagickWand *, FILE *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickWriteImagesFile$descriptor() {
        return MagickWriteImagesFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImagesFile(MagickWand *, FILE *, const unsigned int)
     * }
     */
    public static MethodHandle MagickWriteImagesFile$handle() {
        return MagickWriteImagesFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImagesFile(MagickWand *, FILE *, const unsigned int)
     * }
     */
    public static MemorySegment MagickWriteImagesFile$address() {
        return MagickWriteImagesFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImagesFile(MagickWand *, FILE *, const unsigned int)
     * }
     */
    public static int MagickWriteImagesFile(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickWriteImagesFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImagesFile", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickWriteImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImages(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickWriteImages$descriptor() {
        return MagickWriteImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImages(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static MethodHandle MagickWriteImages$handle() {
        return MagickWriteImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImages(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static MemorySegment MagickWriteImages$address() {
        return MagickWriteImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImages(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static int MagickWriteImages(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickWriteImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImages", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageColors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageColors(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageColors$descriptor() {
        return MagickGetImageColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageColors(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageColors$handle() {
        return MagickGetImageColors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageColors(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageColors$address() {
        return MagickGetImageColors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageColors(MagickWand *)
     * }
     */
    public static long MagickGetImageColors(MemorySegment x0) {
        var mh$ = MagickGetImageColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageColors", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageDelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageDelay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDelay(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageDelay$descriptor() {
        return MagickGetImageDelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDelay(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageDelay$handle() {
        return MagickGetImageDelay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDelay(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageDelay$address() {
        return MagickGetImageDelay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDelay(MagickWand *)
     * }
     */
    public static long MagickGetImageDelay(MemorySegment x0) {
        var mh$ = MagickGetImageDelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageDelay", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageChannelDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageChannelDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageChannelDepth(MagickWand *, const ChannelType)
     * }
     */
    public static FunctionDescriptor MagickGetImageChannelDepth$descriptor() {
        return MagickGetImageChannelDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageChannelDepth(MagickWand *, const ChannelType)
     * }
     */
    public static MethodHandle MagickGetImageChannelDepth$handle() {
        return MagickGetImageChannelDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageChannelDepth(MagickWand *, const ChannelType)
     * }
     */
    public static MemorySegment MagickGetImageChannelDepth$address() {
        return MagickGetImageChannelDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageChannelDepth(MagickWand *, const ChannelType)
     * }
     */
    public static long MagickGetImageChannelDepth(MemorySegment x0, int x1) {
        var mh$ = MagickGetImageChannelDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageChannelDepth", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDepth(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageDepth$descriptor() {
        return MagickGetImageDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDepth(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageDepth$handle() {
        return MagickGetImageDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDepth(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageDepth$address() {
        return MagickGetImageDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDepth(MagickWand *)
     * }
     */
    public static long MagickGetImageDepth(MemorySegment x0) {
        var mh$ = MagickGetImageDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageDepth", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageHeight(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageHeight$descriptor() {
        return MagickGetImageHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageHeight(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageHeight$handle() {
        return MagickGetImageHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageHeight(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageHeight$address() {
        return MagickGetImageHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageHeight(MagickWand *)
     * }
     */
    public static long MagickGetImageHeight(MemorySegment x0) {
        var mh$ = MagickGetImageHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageHeight", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageIterations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageIterations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageIterations(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageIterations$descriptor() {
        return MagickGetImageIterations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageIterations(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageIterations$handle() {
        return MagickGetImageIterations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageIterations(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageIterations$address() {
        return MagickGetImageIterations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageIterations(MagickWand *)
     * }
     */
    public static long MagickGetImageIterations(MemorySegment x0) {
        var mh$ = MagickGetImageIterations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageIterations", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageScene {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageScene");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageScene(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageScene$descriptor() {
        return MagickGetImageScene.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageScene(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageScene$handle() {
        return MagickGetImageScene.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageScene(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageScene$address() {
        return MagickGetImageScene.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageScene(MagickWand *)
     * }
     */
    public static long MagickGetImageScene(MemorySegment x0) {
        var mh$ = MagickGetImageScene.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageScene", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageWidth(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageWidth$descriptor() {
        return MagickGetImageWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageWidth(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageWidth$handle() {
        return MagickGetImageWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageWidth(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageWidth$address() {
        return MagickGetImageWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageWidth(MagickWand *)
     * }
     */
    public static long MagickGetImageWidth(MemorySegment x0) {
        var mh$ = MagickGetImageWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageWidth", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetNumberImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetNumberImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetNumberImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetNumberImages$descriptor() {
        return MagickGetNumberImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetNumberImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetNumberImages$handle() {
        return MagickGetNumberImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetNumberImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetNumberImages$address() {
        return MagickGetNumberImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetNumberImages(MagickWand *)
     * }
     */
    public static long MagickGetNumberImages(MemorySegment x0) {
        var mh$ = MagickGetNumberImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetNumberImages", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetResourceLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_LONG,
            magick_wand.C_INT
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetResourceLimit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetResourceLimit(const ResourceType)
     * }
     */
    public static FunctionDescriptor MagickGetResourceLimit$descriptor() {
        return MagickGetResourceLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetResourceLimit(const ResourceType)
     * }
     */
    public static MethodHandle MagickGetResourceLimit$handle() {
        return MagickGetResourceLimit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetResourceLimit(const ResourceType)
     * }
     */
    public static MemorySegment MagickGetResourceLimit$address() {
        return MagickGetResourceLimit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetResourceLimit(const ResourceType)
     * }
     */
    public static long MagickGetResourceLimit(int x0) {
        var mh$ = MagickGetResourceLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetResourceLimit", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageVirtualPixelMethod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_INT,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageVirtualPixelMethod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickGetImageVirtualPixelMethod(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageVirtualPixelMethod$descriptor() {
        return MagickGetImageVirtualPixelMethod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickGetImageVirtualPixelMethod(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageVirtualPixelMethod$handle() {
        return MagickGetImageVirtualPixelMethod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickGetImageVirtualPixelMethod(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageVirtualPixelMethod$address() {
        return MagickGetImageVirtualPixelMethod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickGetImageVirtualPixelMethod(MagickWand *)
     * }
     */
    public static int MagickGetImageVirtualPixelMethod(MemorySegment x0) {
        var mh$ = MagickGetImageVirtualPixelMethod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageVirtualPixelMethod", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageProfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickGetImageProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetImageProfile$descriptor() {
        return MagickGetImageProfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static MethodHandle MagickGetImageProfile$handle() {
        return MagickGetImageProfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetImageProfile$address() {
        return MagickGetImageProfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetImageProfile(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageProfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageProfile", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRemoveImageProfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickRemoveImageProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *MagickRemoveImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickRemoveImageProfile$descriptor() {
        return MagickRemoveImageProfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *MagickRemoveImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static MethodHandle MagickRemoveImageProfile$handle() {
        return MagickRemoveImageProfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *MagickRemoveImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static MemorySegment MagickRemoveImageProfile$address() {
        return MagickRemoveImageProfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *MagickRemoveImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static MemorySegment MagickRemoveImageProfile(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickRemoveImageProfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRemoveImageProfile", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImageBlob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand.C_POINTER,
            magick_wand.C_POINTER,
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickWriteImageBlob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *MagickWriteImageBlob(MagickWand *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickWriteImageBlob$descriptor() {
        return MagickWriteImageBlob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *MagickWriteImageBlob(MagickWand *, size_t *)
     * }
     */
    public static MethodHandle MagickWriteImageBlob$handle() {
        return MagickWriteImageBlob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *MagickWriteImageBlob(MagickWand *, size_t *)
     * }
     */
    public static MemorySegment MagickWriteImageBlob$address() {
        return MagickWriteImageBlob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *MagickWriteImageBlob(MagickWand *, size_t *)
     * }
     */
    public static MemorySegment MagickWriteImageBlob(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickWriteImageBlob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImageBlob", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickClearException {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickClearException");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickClearException(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickClearException$descriptor() {
        return MagickClearException.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickClearException(MagickWand *)
     * }
     */
    public static MethodHandle MagickClearException$handle() {
        return MagickClearException.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickClearException(MagickWand *)
     * }
     */
    public static MemorySegment MagickClearException$address() {
        return MagickClearException.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickClearException(MagickWand *)
     * }
     */
    public static void MagickClearException(MemorySegment x0) {
        var mh$ = MagickClearException.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickClearException", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickResetIterator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand.findOrThrow("MagickResetIterator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickResetIterator(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickResetIterator$descriptor() {
        return MagickResetIterator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickResetIterator(MagickWand *)
     * }
     */
    public static MethodHandle MagickResetIterator$handle() {
        return MagickResetIterator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickResetIterator(MagickWand *)
     * }
     */
    public static MemorySegment MagickResetIterator$address() {
        return MagickResetIterator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickResetIterator(MagickWand *)
     * }
     */
    public static void MagickResetIterator(MemorySegment x0) {
        var mh$ = MagickResetIterator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickResetIterator", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int YCbCrColorspace = (int)17L;
    /**
     * {@snippet lang=c :
     * #define YCbCrColorspace 17
     * }
     */
    public static int YCbCrColorspace() {
        return YCbCrColorspace;
    }
    private static final int ReplaceCompositeOp = (int)13L;
    /**
     * {@snippet lang=c :
     * #define ReplaceCompositeOp 13
     * }
     */
    public static int ReplaceCompositeOp() {
        return ReplaceCompositeOp;
    }
    private static final int IndexChannel = (int)8L;
    /**
     * {@snippet lang=c :
     * #define IndexChannel 8
     * }
     */
    public static int IndexChannel() {
        return IndexChannel;
    }
    private static final int AreaResource = (int)0L;
    /**
     * {@snippet lang=c :
     * #define AreaResource 0
     * }
     */
    public static int AreaResource() {
        return AreaResource;
    }
}

